This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-09-07T13:13:23.585Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.claude/
  settings.local.json
backend/
  monitoring/
    docker-compose.monitoring.yml
    grafana-datasources.yml
    prometheus.yml
  prisma/
    migrations/
      20250819171454_property_table/
        migration.sql
      20250906000001_add_performance_indexes/
        migration.sql
      migration_lock.toml
    schema.prisma
    seed.data.ts
    seed.ts
  src/
    __tests__/
      api.test.ts
    database/
      prisma.ts
    jobs/
      weather-update.job.ts
    services/
      __tests__/
        weather.service.test.ts
      cache.service.ts
      redis-property.service.ts
      redis-search.service.ts
      redis.service.ts
      weather-cache.service.ts
      weather.service.ts
    types/
      search.types.ts
    use-cases/
      getProperties.ts
    utils/
      logger.ts
    index.ts
  tests/
    load-test.js
    performance.test.ts
  .dockerignore
  Dockerfile
  package.json
  tsconfig.json
docs/
  migrations.md
frontend/
  components/
    PropertySearch.tsx
  public/
    file.svg
    globe.svg
    next.svg
    vercel.svg
    window.svg
  src/
    app/
      globals.css
      layout.tsx
      page.tsx
  .dockerignore
  .gitignore
  Dockerfile
  eslint.config.mjs
  next.config.ts
  package.json
  postcss.config.mjs
  README.md
  tailwind.config.js
  tsconfig.json
.gitignore
docker-compose.prod.yml
docker-compose.yml
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .claude/settings.local.json
================
{
  "permissions": {
    "allow": [
      "Bash(npm install)",
      "Bash(npm run prisma:gen:*)",
      "Bash(npm run dev:enhanced:*)",
      "Bash(npm run dev:*)",
      "Bash(docker run:*)",
      "Bash(curl:*)",
      "Bash(npx tailwindcss:*)",
      "Bash(lsof:*)",
      "Bash(redis-cli:*)",
      "Bash(pkill:*)",
      "Bash(PORT=5001 npm run dev)",
      "Bash(PORT=3000 npm run dev)",
      "Bash(docker-compose up:*)",
      "Bash(docker logs:*)",
      "Bash(docker-compose:*)",
      "Bash(docker exec:*)",
      "Bash(npm run build:*)",
      "Bash(kill:*)",
      "Bash(time curl:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(time docker-compose build:*)"
    ],
    "deny": [],
    "ask": []
  }
}

================
File: backend/monitoring/docker-compose.monitoring.yml
================
version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro

volumes:
  prometheus_data:
  grafana_data:

================
File: backend/monitoring/grafana-datasources.yml
================
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true

================
File: backend/monitoring/prometheus.yml
================
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'backend'
    static_configs:
      - targets: ['backend:5001']
    metrics_path: '/metrics'

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['monitoring:9100']

  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch:9200']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']

================
File: backend/prisma/migrations/20250819171454_property_table/migration.sql
================
-- CreateTable
CREATE TABLE `Property` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(191) NOT NULL,
    `city` VARCHAR(191) NULL,
    `state` VARCHAR(191) NULL,
    `country` VARCHAR(191) NULL DEFAULT 'India',
    `lat` DOUBLE NULL,
    `lng` DOUBLE NULL,
    `geohash5` VARCHAR(191) NULL,
    `isActive` BOOLEAN NOT NULL DEFAULT true,
    `tags` JSON NULL,
    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
    `updatedAt` DATETIME(3) NOT NULL,

    INDEX `Property_isActive_city_idx`(`isActive`, `city`),
    INDEX `Property_lat_lng_idx`(`lat`, `lng`),
    INDEX `Property_geohash5_idx`(`geohash5`),
    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

================
File: backend/prisma/migrations/20250906000001_add_performance_indexes/migration.sql
================
-- CreateIndex
CREATE INDEX `Property_city_state_idx` ON `Property`(`city`, `state`);

-- CreateIndex
CREATE INDEX `Property_isActive_geohash5_idx` ON `Property`(`isActive`, `geohash5`);

-- CreateIndex
CREATE INDEX `Property_isActive_city_state_idx` ON `Property`(`isActive`, `city`, `state`);

-- CreateIndex
CREATE INDEX `Property_createdAt_idx` ON `Property`(`createdAt`);

-- CreateFullTextIndex
CREATE FULLTEXT INDEX `Property_name_idx` ON `Property`(`name`);

================
File: backend/prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "mysql"

================
File: backend/prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  city      String?
  state     String?
  country   String?  @default("India")
  lat       Float?
  lng       Float?
  geohash5  String?
  isActive  Boolean  @default(true)
  tags      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, city])
  @@index([lat, lng])
  @@index([geohash5])
  @@index([city, state])
  @@index([isActive, geohash5])
  @@index([isActive, city, state])
  @@index([createdAt])
  @@fulltext([name])
}

================
File: backend/prisma/seed.data.ts
================
export const propertiesData: Array<{
  name: string;
  city: string;
  state: string;
  country: string;
  lat: number;
  lng: number;
  geohash5: string;
  isActive: boolean;
  tags: Array<string>;
}> = [
  {
    name: "Warden Chennai 001",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.08753,
    lng: 80.2656,
    geohash5: "13.10,80.25",
    isActive: true,
    tags: ["housekeeping"],
  },
  {
    name: "Warden Kochi 002",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.93301,
    lng: 76.25794,
    geohash5: "9.95,76.25",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Ahmedabad 003",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.02372,
    lng: 72.57572,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["near-metro", "housekeeping", "cafeteria", "premium", "laundry"],
  },
  {
    name: "Warden Bengaluru 004",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.97556,
    lng: 77.59141,
    geohash5: "13.00,77.60",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Pune 005",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.51225,
    lng: 73.84863,
    geohash5: "18.50,73.85",
    isActive: true,
    tags: [
      "female-only",
      "premium",
      "laundry",
      "pet-friendly",
      "wifi",
      "cafeteria",
    ],
  },
  {
    name: "Warden Kolkata 006",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.57364,
    lng: 88.37049,
    geohash5: "22.55,88.35",
    isActive: false,
    tags: ["female-only", "premium", "housekeeping", "cctv"],
  },
  {
    name: "Warden Delhi 007",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.7138,
    lng: 77.10961,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["housekeeping", "pool", "laundry", "cafeteria", "budget", "gym"],
  },
  {
    name: "Warden Pune 008",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.5238,
    lng: 73.86074,
    geohash5: "18.50,73.85",
    isActive: true,
    tags: ["power-backup", "premium", "budget", "cctv", "cowork"],
  },
  {
    name: "Warden Mumbai 009",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08719,
    lng: 72.87539,
    geohash5: "19.10,72.90",
    isActive: true,
    tags: ["cafeteria", "budget", "gym", "pet-friendly", "wifi"],
  },
  {
    name: "Warden Bengaluru 010",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.93322,
    lng: 77.61582,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["budget", "housekeeping", "cctv", "cafeteria"],
  },
  {
    name: "Warden Jaipur 011",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.9077,
    lng: 75.78223,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["cowork", "female-only", "premium", "pool"],
  },
  {
    name: "Warden Kolkata 012",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.51119,
    lng: 88.39315,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["cctv", "ac", "pet-friendly", "wifi"],
  },
  {
    name: "Warden Mumbai 013",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.0108,
    lng: 72.85981,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: ["power-backup", "pool", "parking", "premium"],
  },
  {
    name: "Warden Kochi 014",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03442,
    lng: 76.31562,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["housekeeping"],
  },
  {
    name: "Warden Kochi 015",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03037,
    lng: 76.3052,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["near-metro", "power-backup"],
  },
  {
    name: "Warden Hyderabad 016",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.43224,
    lng: 78.41215,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Kochi 017",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.97628,
    lng: 76.27048,
    geohash5: "10.00,76.25",
    isActive: true,
    tags: ["wifi"],
  },
  {
    name: "Warden Jaipur 018",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.90464,
    lng: 75.78456,
    geohash5: "26.90,75.80",
    isActive: false,
    tags: ["premium", "housekeeping", "wifi", "parking", "cctv", "ac"],
  },
  {
    name: "Warden Jaipur 019",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92196,
    lng: 75.78795,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["laundry"],
  },
  {
    name: "Warden Kochi 020",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.9265,
    lng: 76.27475,
    geohash5: "9.95,76.25",
    isActive: true,
    tags: ["pool", "parking", "cowork"],
  },
  {
    name: "Warden Delhi 021",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.53173,
    lng: 77.4009,
    geohash5: "28.55,77.40",
    isActive: true,
    tags: ["female-only", "cafeteria", "cowork", "parking", "ac"],
  },
  {
    name: "Warden Chennai 022",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.03222,
    lng: 80.23478,
    geohash5: "13.05,80.25",
    isActive: true,
    tags: ["cafeteria", "wifi", "ac", "female-only"],
  },
  {
    name: "Warden Delhi 023",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.62201,
    lng: 77.21619,
    geohash5: "28.60,77.20",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Jaipur 024",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91318,
    lng: 75.79177,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["cctv", "housekeeping", "pet-friendly", "cafeteria"],
  },
  {
    name: "Warden Delhi 025",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.60584,
    lng: 77.20762,
    geohash5: "28.60,77.20",
    isActive: true,
    tags: ["near-metro", "cafeteria", "cctv"],
  },
  {
    name: "Warden Chennai 026",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.08075,
    lng: 80.26749,
    geohash5: "13.10,80.25",
    isActive: true,
    tags: [
      "housekeeping",
      "cctv",
      "parking",
      "near-metro",
      "cowork",
      "cafeteria",
    ],
  },
  {
    name: "Warden Mumbai 027",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08885,
    lng: 72.87309,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["parking"],
  },
  {
    name: "Warden Kochi 028",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.92221,
    lng: 76.27729,
    geohash5: "9.90,76.30",
    isActive: true,
    tags: [
      "wifi",
      "ac",
      "pet-friendly",
      "housekeeping",
      "power-backup",
      "pool",
    ],
  },
  {
    name: "Warden Delhi 029",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.71215,
    lng: 77.09579,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["pet-friendly"],
  },
  {
    name: "Warden Jaipur 030",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.84516,
    lng: 75.77305,
    geohash5: "26.85,75.75",
    isActive: true,
    tags: [
      "cctv",
      "power-backup",
      "housekeeping",
      "laundry",
      "near-metro",
      "wifi",
    ],
  },
  {
    name: "Warden Kochi 031",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.93616,
    lng: 76.25844,
    geohash5: "9.95,76.25",
    isActive: true,
    tags: ["cctv", "cowork", "near-metro", "parking"],
  },
  {
    name: "Warden Kochi 032",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.93823,
    lng: 76.25867,
    geohash5: "9.95,76.25",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Ahmedabad 033",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.02408,
    lng: 72.56219,
    geohash5: "23.00,72.55",
    isActive: true,
    tags: ["near-metro"],
  },
  {
    name: "Warden Ahmedabad 034",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 22.99623,
    lng: 72.59522,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["budget", "housekeeping", "laundry", "pool", "power-backup"],
  },
  {
    name: "Warden Hyderabad 035",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.44462,
    lng: 78.39654,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["wifi"],
  },
  {
    name: "Warden Ahmedabad 036",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.01397,
    lng: 72.56566,
    geohash5: "23.00,72.55",
    isActive: true,
    tags: ["laundry", "parking"],
  },
  {
    name: "Warden Chennai 037",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.08009,
    lng: 80.26385,
    geohash5: "13.10,80.25",
    isActive: true,
    tags: ["premium", "cctv", "pet-friendly", "budget", "cowork", "wifi"],
  },
  {
    name: "Warden Kochi 038",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03364,
    lng: 76.30047,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Chennai 039",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.04726,
    lng: 80.15305,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["pool", "female-only", "gym", "housekeeping"],
  },
  {
    name: "Warden Hyderabad 040",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.42677,
    lng: 78.42011,
    geohash5: "17.45,78.40",
    isActive: false,
    tags: ["ac", "cctv", "budget", "pool", "laundry", "wifi"],
  },
  {
    name: "Warden Mumbai 041",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.0272,
    lng: 72.84943,
    geohash5: "19.05,72.85",
    isActive: true,
    tags: ["near-metro", "cowork", "wifi"],
  },
  {
    name: "Warden Mumbai 042",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.00832,
    lng: 72.85358,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: ["laundry", "pool", "power-backup", "wifi"],
  },
  {
    name: "Warden Bengaluru 043",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.9294,
    lng: 77.61949,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["female-only"],
  },
  {
    name: "Warden Kolkata 044",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60599,
    lng: 88.41652,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["gym"],
  },
  {
    name: "Warden Mumbai 045",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.0801,
    lng: 72.87033,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["near-metro", "pet-friendly"],
  },
  {
    name: "Warden Delhi 046",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.69728,
    lng: 77.10653,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["ac", "near-metro", "cafeteria"],
  },
  {
    name: "Warden Jaipur 047",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.8428,
    lng: 75.76981,
    geohash5: "26.85,75.75",
    isActive: false,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Delhi 048",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70067,
    lng: 77.10979,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["cowork", "gym", "budget", "cctv", "pool", "near-metro"],
  },
  {
    name: "Warden Kochi 049",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03378,
    lng: 76.30071,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["gym", "premium"],
  },
  {
    name: "Warden Hyderabad 050",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.37717,
    lng: 78.48539,
    geohash5: "17.40,78.50",
    isActive: true,
    tags: ["budget", "pool", "premium", "cowork", "ac"],
  },
  {
    name: "Warden Ahmedabad 051",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.01759,
    lng: 72.57558,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Chennai 052",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.05462,
    lng: 80.16006,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["housekeeping", "female-only", "laundry", "cowork", "near-metro"],
  },
  {
    name: "Warden Pune 053",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.51284,
    lng: 73.92709,
    geohash5: "18.50,73.95",
    isActive: true,
    tags: ["near-metro"],
  },
  {
    name: "Warden Kolkata 054",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60596,
    lng: 88.40148,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["premium", "pool", "cowork", "wifi"],
  },
  {
    name: "Warden Delhi 055",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70982,
    lng: 77.10463,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["parking", "cafeteria"],
  },
  {
    name: "Warden Delhi 056",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.53496,
    lng: 77.39902,
    geohash5: "28.55,77.40",
    isActive: true,
    tags: ["gym", "budget", "ac", "laundry", "cowork", "parking"],
  },
  {
    name: "Warden Pune 057",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.52677,
    lng: 73.86172,
    geohash5: "18.55,73.85",
    isActive: false,
    tags: [
      "premium",
      "housekeeping",
      "pet-friendly",
      "parking",
      "power-backup",
    ],
  },
  {
    name: "Warden Delhi 058",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70633,
    lng: 77.10787,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["near-metro", "parking", "budget"],
  },
  {
    name: "Warden Kolkata 059",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.51479,
    lng: 88.37615,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["wifi", "parking", "pet-friendly", "near-metro", "ac"],
  },
  {
    name: "Warden Delhi 060",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.61998,
    lng: 77.21292,
    geohash5: "28.60,77.20",
    isActive: true,
    tags: ["ac", "cowork", "housekeeping"],
  },
  {
    name: "Warden Chennai 061",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.03447,
    lng: 80.23299,
    geohash5: "13.05,80.25",
    isActive: true,
    tags: ["budget", "pet-friendly", "cafeteria", "premium"],
  },
  {
    name: "Warden Kochi 062",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03161,
    lng: 76.30936,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["cctv"],
  },
  {
    name: "Warden Delhi 063",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.53105,
    lng: 77.39655,
    geohash5: "28.55,77.40",
    isActive: false,
    tags: ["cafeteria", "laundry", "cctv"],
  },
  {
    name: "Warden Hyderabad 064",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.38043,
    lng: 78.48309,
    geohash5: "17.40,78.50",
    isActive: true,
    tags: ["power-backup", "cctv", "parking", "housekeeping"],
  },
  {
    name: "Warden Mumbai 065",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.01188,
    lng: 72.8545,
    geohash5: "19.00,72.85",
    isActive: false,
    tags: ["parking", "pool"],
  },
  {
    name: "Warden Kolkata 066",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.5249,
    lng: 88.38488,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["wifi", "near-metro", "pet-friendly", "premium", "pool"],
  },
  {
    name: "Warden Pune 067",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.51397,
    lng: 73.93307,
    geohash5: "18.50,73.95",
    isActive: true,
    tags: ["near-metro", "cowork", "female-only", "cctv", "parking", "premium"],
  },
  {
    name: "Warden Jaipur 068",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.90786,
    lng: 75.78701,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["budget", "cctv", "parking"],
  },
  {
    name: "Warden Mumbai 069",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.09799,
    lng: 72.87521,
    geohash5: "19.10,72.90",
    isActive: true,
    tags: ["wifi", "parking", "pool", "premium"],
  },
  {
    name: "Warden Bengaluru 070",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.97445,
    lng: 77.58731,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["gym", "wifi", "laundry"],
  },
  {
    name: "Warden Delhi 071",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70064,
    lng: 77.10772,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["cowork", "pet-friendly", "near-metro"],
  },
  {
    name: "Warden Chennai 072",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.03219,
    lng: 80.23449,
    geohash5: "13.05,80.25",
    isActive: false,
    tags: ["cafeteria", "budget"],
  },
  {
    name: "Warden Bengaluru 073",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.98059,
    lng: 77.58859,
    geohash5: "13.00,77.60",
    isActive: true,
    tags: ["laundry"],
  },
  {
    name: "Warden Jaipur 074",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91439,
    lng: 75.80896,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["cowork", "pet-friendly", "gym"],
  },
  {
    name: "Warden Ahmedabad 075",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.00427,
    lng: 72.60556,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Bengaluru 076",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.93672,
    lng: 77.63266,
    geohash5: "12.95,77.65",
    isActive: false,
    tags: ["pet-friendly", "female-only", "housekeeping"],
  },
  {
    name: "Warden Delhi 077",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.61784,
    lng: 77.20503,
    geohash5: "28.60,77.20",
    isActive: true,
    tags: ["housekeeping", "pet-friendly", "premium", "parking", "wifi"],
  },
  {
    name: "Warden Kolkata 078",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59841,
    lng: 88.40812,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["wifi", "near-metro"],
  },
  {
    name: "Warden Jaipur 079",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91107,
    lng: 75.78454,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: [
      "parking",
      "female-only",
      "power-backup",
      "pool",
      "near-metro",
      "cowork",
    ],
  },
  {
    name: "Warden Hyderabad 080",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.43316,
    lng: 78.41276,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["parking", "pool", "near-metro"],
  },
  {
    name: "Warden Hyderabad 081",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.45533,
    lng: 78.39811,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Delhi 082",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.7055,
    lng: 77.10586,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["wifi", "cafeteria"],
  },
  {
    name: "Warden Mumbai 083",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08384,
    lng: 72.87156,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["cowork", "parking"],
  },
  {
    name: "Warden Hyderabad 084",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.4172,
    lng: 78.42096,
    geohash5: "17.40,78.40",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Jaipur 085",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92726,
    lng: 75.80381,
    geohash5: "26.95,75.80",
    isActive: true,
    tags: ["cctv", "cafeteria", "pet-friendly", "wifi", "ac"],
  },
  {
    name: "Warden Kolkata 086",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59587,
    lng: 88.41128,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["cctv", "cowork"],
  },
  {
    name: "Warden Kolkata 087",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60201,
    lng: 88.40504,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["cowork", "laundry", "parking"],
  },
  {
    name: "Warden Delhi 088",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.69649,
    lng: 77.10322,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: [
      "gym",
      "housekeeping",
      "parking",
      "female-only",
      "cafeteria",
      "laundry",
    ],
  },
  {
    name: "Warden Kochi 089",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.97796,
    lng: 76.26501,
    geohash5: "10.00,76.25",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Mumbai 090",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.07988,
    lng: 72.86628,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["ac", "wifi"],
  },
  {
    name: "Warden Mumbai 091",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.02497,
    lng: 72.85602,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: [
      "wifi",
      "premium",
      "laundry",
      "cafeteria",
      "pet-friendly",
      "female-only",
    ],
  },
  {
    name: "Warden Bengaluru 092",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.94402,
    lng: 77.62405,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["power-backup", "pool", "cafeteria", "ac", "premium", "budget"],
  },
  {
    name: "Warden Mumbai 093",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08222,
    lng: 72.88668,
    geohash5: "19.10,72.90",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Kolkata 094",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60292,
    lng: 88.41037,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: [
      "pet-friendly",
      "cafeteria",
      "parking",
      "laundry",
      "premium",
      "pool",
    ],
  },
  {
    name: "Warden Ahmedabad 095",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.02469,
    lng: 72.5762,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["pool", "budget", "housekeeping", "laundry", "parking", "ac"],
  },
  {
    name: "Warden Mumbai 096",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.0091,
    lng: 72.84625,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: ["cctv", "laundry", "wifi"],
  },
  {
    name: "Warden Hyderabad 097",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.43419,
    lng: 78.40342,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Ahmedabad 098",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.00598,
    lng: 72.59396,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Hyderabad 099",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.37643,
    lng: 78.48002,
    geohash5: "17.40,78.50",
    isActive: true,
    tags: ["premium", "cafeteria"],
  },
  {
    name: "Warden Hyderabad 100",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.42505,
    lng: 78.40744,
    geohash5: "17.45,78.40",
    isActive: false,
    tags: ["cctv", "cafeteria", "ac", "premium"],
  },
  {
    name: "Warden Kolkata 101",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59745,
    lng: 88.40301,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Ahmedabad 102",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.00892,
    lng: 72.60999,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["cowork", "premium", "wifi", "pet-friendly", "power-backup"],
  },
  {
    name: "Warden Jaipur 103",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.84033,
    lng: 75.76561,
    geohash5: "26.85,75.75",
    isActive: true,
    tags: ["cctv", "ac", "cafeteria", "gym", "pool"],
  },
  {
    name: "Warden Chennai 104",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.0793,
    lng: 80.27457,
    geohash5: "13.10,80.25",
    isActive: true,
    tags: ["pet-friendly", "near-metro"],
  },
  {
    name: "Warden Bengaluru 105",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.92696,
    lng: 77.61955,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["pet-friendly"],
  },
  {
    name: "Warden Bengaluru 106",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.92149,
    lng: 77.63794,
    geohash5: "12.90,77.65",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Ahmedabad 107",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.03251,
    lng: 72.5852,
    geohash5: "23.05,72.60",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Hyderabad 108",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.45592,
    lng: 78.39119,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Hyderabad 109",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.41727,
    lng: 78.41016,
    geohash5: "17.40,78.40",
    isActive: true,
    tags: ["housekeeping"],
  },
  {
    name: "Warden Chennai 110",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.05284,
    lng: 80.15757,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["premium", "cowork", "female-only", "laundry", "pool"],
  },
  {
    name: "Warden Jaipur 111",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91154,
    lng: 75.78019,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["laundry"],
  },
  {
    name: "Warden Hyderabad 112",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.4451,
    lng: 78.39725,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["wifi", "laundry"],
  },
  {
    name: "Warden Ahmedabad 113",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.00988,
    lng: 72.59979,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["parking"],
  },
  {
    name: "Warden Pune 114",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.50994,
    lng: 73.92687,
    geohash5: "18.50,73.95",
    isActive: true,
    tags: ["budget", "near-metro", "housekeeping"],
  },
  {
    name: "Warden Delhi 115",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.53316,
    lng: 77.39812,
    geohash5: "28.55,77.40",
    isActive: true,
    tags: ["ac", "gym", "female-only"],
  },
  {
    name: "Warden Kolkata 116",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.52657,
    lng: 88.38905,
    geohash5: "22.55,88.40",
    isActive: true,
    tags: ["laundry", "cafeteria", "wifi", "power-backup", "cowork"],
  },
  {
    name: "Warden Pune 117",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.52788,
    lng: 73.85551,
    geohash5: "18.55,73.85",
    isActive: true,
    tags: ["parking", "wifi", "female-only", "power-backup"],
  },
  {
    name: "Warden Mumbai 118",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.07539,
    lng: 72.88708,
    geohash5: "19.10,72.90",
    isActive: false,
    tags: ["pet-friendly", "budget"],
  },
  {
    name: "Warden Pune 119",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.56619,
    lng: 73.8053,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["cctv", "near-metro"],
  },
  {
    name: "Warden Ahmedabad 120",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.0172,
    lng: 72.57509,
    geohash5: "23.00,72.60",
    isActive: false,
    tags: ["cafeteria", "female-only"],
  },
  {
    name: "Warden Chennai 121",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.05028,
    lng: 80.14961,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Bengaluru 122",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.94112,
    lng: 77.62037,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["near-metro", "power-backup"],
  },
  {
    name: "Warden Kolkata 123",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60464,
    lng: 88.4016,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["power-backup"],
  },
  {
    name: "Warden Kolkata 124",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60466,
    lng: 88.40795,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["laundry", "housekeeping", "cafeteria", "budget"],
  },
  {
    name: "Warden Hyderabad 125",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.41719,
    lng: 78.41809,
    geohash5: "17.40,78.40",
    isActive: true,
    tags: ["gym", "ac"],
  },
  {
    name: "Warden Pune 126",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.55498,
    lng: 73.81694,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["cowork", "cafeteria", "near-metro", "laundry", "housekeeping"],
  },
  {
    name: "Warden Jaipur 127",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.90714,
    lng: 75.78874,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["premium", "female-only", "laundry", "wifi"],
  },
  {
    name: "Warden Kolkata 128",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.50696,
    lng: 88.3905,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["ac", "parking", "premium", "female-only", "cafeteria", "laundry"],
  },
  {
    name: "Warden Delhi 129",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.54154,
    lng: 77.38538,
    geohash5: "28.55,77.40",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Mumbai 130",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.00954,
    lng: 72.85875,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Bengaluru 131",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.9114,
    lng: 77.63133,
    geohash5: "12.90,77.65",
    isActive: true,
    tags: ["budget", "female-only"],
  },
  {
    name: "Warden Delhi 132",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.61963,
    lng: 77.21653,
    geohash5: "28.60,77.20",
    isActive: true,
    tags: ["cowork", "near-metro"],
  },
  {
    name: "Warden Jaipur 133",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.85163,
    lng: 75.76067,
    geohash5: "26.85,75.75",
    isActive: true,
    tags: ["parking"],
  },
  {
    name: "Warden Mumbai 134",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.0832,
    lng: 72.88218,
    geohash5: "19.10,72.90",
    isActive: true,
    tags: ["female-only", "ac", "pet-friendly"],
  },
  {
    name: "Warden Hyderabad 135",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.41947,
    lng: 78.40937,
    geohash5: "17.40,78.40",
    isActive: true,
    tags: ["cowork", "premium", "pool", "budget", "gym"],
  },
  {
    name: "Warden Delhi 136",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.6946,
    lng: 77.11018,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["budget", "parking", "premium", "housekeeping"],
  },
  {
    name: "Warden Jaipur 137",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91814,
    lng: 75.79817,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["ac"],
  },
  {
    name: "Warden Hyderabad 138",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.44062,
    lng: 78.3862,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["laundry", "pool", "cafeteria", "gym"],
  },
  {
    name: "Warden Kochi 139",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.02675,
    lng: 76.31293,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["housekeeping", "near-metro", "cafeteria"],
  },
  {
    name: "Warden Hyderabad 140",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.38881,
    lng: 78.48105,
    geohash5: "17.40,78.50",
    isActive: false,
    tags: ["cafeteria", "near-metro", "gym"],
  },
  {
    name: "Warden Pune 141",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.56703,
    lng: 73.8106,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["pet-friendly"],
  },
  {
    name: "Warden Chennai 142",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.03363,
    lng: 80.22794,
    geohash5: "13.05,80.25",
    isActive: true,
    tags: ["wifi", "cctv", "pet-friendly", "gym", "housekeeping"],
  },
  {
    name: "Warden Ahmedabad 143",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.01387,
    lng: 72.5767,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Delhi 144",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70959,
    lng: 77.10827,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["wifi", "laundry", "near-metro", "power-backup"],
  },
  {
    name: "Warden Kochi 145",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03097,
    lng: 76.3006,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["wifi", "power-backup", "cctv", "gym", "housekeeping", "premium"],
  },
  {
    name: "Warden Mumbai 146",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08065,
    lng: 72.87043,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["housekeeping", "female-only", "ac", "cafeteria"],
  },
  {
    name: "Warden Pune 147",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.56087,
    lng: 73.80674,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["ac"],
  },
  {
    name: "Warden Kochi 148",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.02416,
    lng: 76.31768,
    geohash5: "10.00,76.30",
    isActive: true,
    tags: ["cctv"],
  },
  {
    name: "Warden Kolkata 149",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59316,
    lng: 88.41225,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["power-backup", "parking", "ac"],
  },
  {
    name: "Warden Mumbai 150",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.06852,
    lng: 72.88019,
    geohash5: "19.05,72.90",
    isActive: true,
    tags: ["budget", "pool", "premium", "cowork"],
  },
  {
    name: "Warden Kochi 151",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.9809,
    lng: 76.27886,
    geohash5: "10.00,76.30",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Delhi 152",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70088,
    lng: 77.10157,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["housekeeping", "gym", "pool"],
  },
  {
    name: "Warden Hyderabad 153",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.45737,
    lng: 78.39524,
    geohash5: "17.45,78.40",
    isActive: false,
    tags: ["power-backup", "ac", "near-metro"],
  },
  {
    name: "Warden Kolkata 154",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.57749,
    lng: 88.36135,
    geohash5: "22.60,88.35",
    isActive: true,
    tags: ["ac"],
  },
  {
    name: "Warden Kochi 155",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.97889,
    lng: 76.26544,
    geohash5: "10.00,76.25",
    isActive: true,
    tags: ["near-metro", "cctv"],
  },
  {
    name: "Warden Bengaluru 156",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.93721,
    lng: 77.62153,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["pool", "power-backup", "budget", "cafeteria"],
  },
  {
    name: "Warden Chennai 157",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.04871,
    lng: 80.23105,
    geohash5: "13.05,80.25",
    isActive: true,
    tags: ["cowork", "premium", "housekeeping", "pet-friendly", "pool", "cctv"],
  },
  {
    name: "Warden Ahmedabad 158",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.0034,
    lng: 72.60113,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["cowork", "wifi", "power-backup", "laundry"],
  },
  {
    name: "Warden Hyderabad 159",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.44532,
    lng: 78.38513,
    geohash5: "17.45,78.40",
    isActive: false,
    tags: ["pet-friendly"],
  },
  {
    name: "Warden Bengaluru 160",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.97652,
    lng: 77.5889,
    geohash5: "13.00,77.60",
    isActive: true,
    tags: ["parking", "gym", "power-backup"],
  },
  {
    name: "Warden Pune 161",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.56092,
    lng: 73.81537,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["gym"],
  },
  {
    name: "Warden Bengaluru 162",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.90573,
    lng: 77.63756,
    geohash5: "12.90,77.65",
    isActive: true,
    tags: ["cctv", "premium", "cafeteria"],
  },
  {
    name: "Warden Delhi 163",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.52778,
    lng: 77.3896,
    geohash5: "28.55,77.40",
    isActive: true,
    tags: ["cctv", "cowork"],
  },
  {
    name: "Warden Bengaluru 164",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.96951,
    lng: 77.59659,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Delhi 165",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.61918,
    lng: 77.20479,
    geohash5: "28.60,77.20",
    isActive: true,
    tags: ["wifi"],
  },
  {
    name: "Warden Kolkata 166",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.56518,
    lng: 88.36455,
    geohash5: "22.55,88.35",
    isActive: false,
    tags: ["female-only"],
  },
  {
    name: "Warden Bengaluru 167",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.92557,
    lng: 77.63292,
    geohash5: "12.95,77.65",
    isActive: true,
    tags: ["budget", "premium", "pool", "parking", "near-metro", "cctv"],
  },
  {
    name: "Warden Chennai 168",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.03222,
    lng: 80.2302,
    geohash5: "13.05,80.25",
    isActive: true,
    tags: ["parking", "near-metro", "female-only", "gym", "ac", "pool"],
  },
  {
    name: "Warden Delhi 169",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70588,
    lng: 77.10298,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["premium", "female-only", "gym"],
  },
  {
    name: "Warden Mumbai 170",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.07621,
    lng: 72.86998,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["pool", "parking", "pet-friendly", "gym"],
  },
  {
    name: "Warden Mumbai 171",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.06806,
    lng: 72.87282,
    geohash5: "19.05,72.85",
    isActive: true,
    tags: ["laundry"],
  },
  {
    name: "Warden Chennai 172",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.09173,
    lng: 80.27326,
    geohash5: "13.10,80.25",
    isActive: true,
    tags: ["parking", "budget", "premium"],
  },
  {
    name: "Warden Ahmedabad 173",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.03728,
    lng: 72.58254,
    geohash5: "23.05,72.60",
    isActive: false,
    tags: ["parking"],
  },
  {
    name: "Warden Jaipur 174",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91816,
    lng: 75.79549,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["female-only"],
  },
  {
    name: "Warden Hyderabad 175",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.44734,
    lng: 78.38264,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["premium", "ac", "budget", "parking", "cctv", "female-only"],
  },
  {
    name: "Warden Jaipur 176",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92319,
    lng: 75.80584,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["parking"],
  },
  {
    name: "Warden Ahmedabad 177",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 22.99366,
    lng: 72.6021,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["laundry", "wifi", "cafeteria", "ac"],
  },
  {
    name: "Warden Pune 178",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.55069,
    lng: 73.81062,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Jaipur 179",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92255,
    lng: 75.79317,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["premium", "pool"],
  },
  {
    name: "Warden Pune 180",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.56096,
    lng: 73.81348,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["budget", "ac", "gym", "parking", "cowork"],
  },
  {
    name: "Warden Hyderabad 181",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.45277,
    lng: 78.39463,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["laundry", "gym", "ac", "premium"],
  },
  {
    name: "Warden Pune 182",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.51825,
    lng: 73.92997,
    geohash5: "18.50,73.95",
    isActive: true,
    tags: ["laundry", "premium", "female-only"],
  },
  {
    name: "Warden Hyderabad 183",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.42453,
    lng: 78.41783,
    geohash5: "17.40,78.40",
    isActive: false,
    tags: [
      "laundry",
      "budget",
      "female-only",
      "near-metro",
      "parking",
      "cowork",
    ],
  },
  {
    name: "Warden Kolkata 184",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59824,
    lng: 88.40525,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["pool"],
  },
  {
    name: "Warden Jaipur 185",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.90693,
    lng: 75.78005,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Chennai 186",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.05162,
    lng: 80.1643,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["ac", "budget", "gym", "pet-friendly"],
  },
  {
    name: "Warden Ahmedabad 187",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.02309,
    lng: 72.57362,
    geohash5: "23.00,72.55",
    isActive: true,
    tags: ["gym", "female-only", "cafeteria", "wifi", "pool"],
  },
  {
    name: "Warden Delhi 188",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70631,
    lng: 77.10755,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["parking", "housekeeping", "cowork", "cctv", "laundry", "cafeteria"],
  },
  {
    name: "Warden Delhi 189",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.70767,
    lng: 77.10391,
    geohash5: "28.70,77.10",
    isActive: true,
    tags: ["parking", "pet-friendly", "laundry"],
  },
  {
    name: "Warden Kochi 190",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.98067,
    lng: 76.26624,
    geohash5: "10.00,76.25",
    isActive: true,
    tags: ["laundry"],
  },
  {
    name: "Warden Bengaluru 191",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.91371,
    lng: 77.63612,
    geohash5: "12.90,77.65",
    isActive: true,
    tags: ["housekeeping"],
  },
  {
    name: "Warden Mumbai 192",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08859,
    lng: 72.86587,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["near-metro", "ac", "housekeeping", "cafeteria", "gym", "wifi"],
  },
  {
    name: "Warden Kolkata 193",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59848,
    lng: 88.40572,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["female-only"],
  },
  {
    name: "Warden Pune 194",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.52718,
    lng: 73.8597,
    geohash5: "18.55,73.85",
    isActive: true,
    tags: ["laundry", "power-backup", "wifi", "cctv", "cafeteria", "parking"],
  },
  {
    name: "Warden Jaipur 195",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.84901,
    lng: 75.77202,
    geohash5: "26.85,75.75",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Mumbai 196",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.0264,
    lng: 72.85838,
    geohash5: "19.05,72.85",
    isActive: true,
    tags: ["housekeeping", "pet-friendly", "laundry"],
  },
  {
    name: "Warden Chennai 197",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.07747,
    lng: 80.27348,
    geohash5: "13.10,80.25",
    isActive: true,
    tags: ["parking", "ac", "cctv", "cafeteria"],
  },
  {
    name: "Warden Bengaluru 198",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.91441,
    lng: 77.63354,
    geohash5: "12.90,77.65",
    isActive: true,
    tags: ["premium"],
  },
  {
    name: "Warden Ahmedabad 199",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.02481,
    lng: 72.57833,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["power-backup", "cowork", "gym", "ac", "parking"],
  },
  {
    name: "Warden Kochi 200",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.97271,
    lng: 76.28047,
    geohash5: "9.95,76.30",
    isActive: true,
    tags: ["pet-friendly"],
  },
  {
    name: "Warden Hyderabad 201",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.41732,
    lng: 78.41777,
    geohash5: "17.40,78.40",
    isActive: true,
    tags: ["cafeteria", "female-only"],
  },
  {
    name: "Warden Chennai 202",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.0509,
    lng: 80.15425,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["female-only"],
  },
  {
    name: "Warden Mumbai 203",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.01689,
    lng: 72.86011,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: ["gym", "pet-friendly", "power-backup", "ac", "female-only"],
  },
  {
    name: "Warden Jaipur 204",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.90827,
    lng: 75.77818,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["ac"],
  },
  {
    name: "Warden Hyderabad 205",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.42496,
    lng: 78.41831,
    geohash5: "17.40,78.40",
    isActive: true,
    tags: ["cowork", "wifi", "pet-friendly"],
  },
  {
    name: "Warden Hyderabad 206",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.45554,
    lng: 78.38246,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["budget", "laundry", "ac", "pet-friendly", "gym"],
  },
  {
    name: "Warden Kolkata 207",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59979,
    lng: 88.41713,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["gym", "cafeteria"],
  },
  {
    name: "Warden Pune 208",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.55433,
    lng: 73.79935,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["power-backup", "pool", "premium"],
  },
  {
    name: "Warden Mumbai 209",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.01348,
    lng: 72.84825,
    geohash5: "19.00,72.85",
    isActive: true,
    tags: ["premium", "laundry"],
  },
  {
    name: "Warden Kolkata 210",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.5764,
    lng: 88.36093,
    geohash5: "22.60,88.35",
    isActive: true,
    tags: ["female-only"],
  },
  {
    name: "Warden Kolkata 211",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.51959,
    lng: 88.38903,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["power-backup"],
  },
  {
    name: "Warden Kolkata 212",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.51706,
    lng: 88.3882,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["wifi"],
  },
  {
    name: "Warden Ahmedabad 213",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.00553,
    lng: 72.5907,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Pune 214",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.50656,
    lng: 73.92734,
    geohash5: "18.50,73.95",
    isActive: true,
    tags: ["laundry", "budget", "cafeteria", "gym"],
  },
  {
    name: "Warden Chennai 215",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.03895,
    lng: 80.15494,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: ["cowork", "housekeeping"],
  },
  {
    name: "Warden Bengaluru 216",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.90782,
    lng: 77.63905,
    geohash5: "12.90,77.65",
    isActive: true,
    tags: ["housekeeping", "laundry", "pet-friendly", "parking"],
  },
  {
    name: "Warden Delhi 217",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.53121,
    lng: 77.39933,
    geohash5: "28.55,77.40",
    isActive: true,
    tags: ["pool", "ac", "power-backup"],
  },
  {
    name: "Warden Jaipur 218",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92037,
    lng: 75.7862,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["budget"],
  },
  {
    name: "Warden Chennai 219",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.04704,
    lng: 80.16543,
    geohash5: "13.05,80.15",
    isActive: true,
    tags: [
      "gym",
      "female-only",
      "parking",
      "near-metro",
      "budget",
      "power-backup",
    ],
  },
  {
    name: "Warden Kochi 220",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.92363,
    lng: 76.26132,
    geohash5: "9.90,76.25",
    isActive: true,
    tags: ["cafeteria"],
  },
  {
    name: "Warden Bengaluru 221",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.93628,
    lng: 77.62188,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["laundry", "premium", "ac", "near-metro", "cctv", "pool"],
  },
  {
    name: "Warden Jaipur 222",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92032,
    lng: 75.79819,
    geohash5: "26.90,75.80",
    isActive: false,
    tags: ["power-backup", "cctv", "gym", "budget"],
  },
  {
    name: "Warden Jaipur 223",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.92245,
    lng: 75.79257,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["gym", "pet-friendly", "power-backup", "pool", "cowork", "wifi"],
  },
  {
    name: "Warden Kochi 224",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.92728,
    lng: 76.26054,
    geohash5: "9.95,76.25",
    isActive: true,
    tags: ["cafeteria", "gym", "cowork", "laundry", "ac"],
  },
  {
    name: "Warden Kochi 225",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.0175,
    lng: 76.30446,
    geohash5: "10.00,76.30",
    isActive: true,
    tags: ["power-backup", "cowork", "budget", "cctv"],
  },
  {
    name: "Warden Ahmedabad 226",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 23.01592,
    lng: 72.57389,
    geohash5: "23.00,72.55",
    isActive: true,
    tags: ["budget", "near-metro", "premium", "wifi"],
  },
  {
    name: "Warden Bengaluru 227",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.96251,
    lng: 77.59743,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["cowork", "budget", "housekeeping", "pet-friendly"],
  },
  {
    name: "Warden Ahmedabad 228",
    city: "Ahmedabad",
    state: "Gujarat",
    country: "India",
    lat: 22.99051,
    lng: 72.60778,
    geohash5: "23.00,72.60",
    isActive: true,
    tags: ["premium", "budget", "laundry", "cafeteria"],
  },
  {
    name: "Warden Kolkata 229",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.51587,
    lng: 88.38697,
    geohash5: "22.50,88.40",
    isActive: true,
    tags: ["parking"],
  },
  {
    name: "Warden Jaipur 230",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.9092,
    lng: 75.78017,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: [
      "budget",
      "female-only",
      "near-metro",
      "gym",
      "pool",
      "power-backup",
    ],
  },
  {
    name: "Warden Kochi 231",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.97442,
    lng: 76.26783,
    geohash5: "9.95,76.25",
    isActive: true,
    tags: ["cowork"],
  },
  {
    name: "Warden Mumbai 232",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.06701,
    lng: 72.88661,
    geohash5: "19.05,72.90",
    isActive: true,
    tags: [
      "near-metro",
      "housekeeping",
      "cctv",
      "power-backup",
      "gym",
      "premium",
    ],
  },
  {
    name: "Warden Delhi 233",
    city: "Delhi",
    state: "Delhi",
    country: "India",
    lat: 28.61387,
    lng: 77.20929,
    geohash5: "28.60,77.20",
    isActive: false,
    tags: ["premium", "cafeteria", "wifi"],
  },
  {
    name: "Warden Kolkata 234",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.60014,
    lng: 88.40281,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["female-only", "wifi", "parking", "laundry"],
  },
  {
    name: "Warden Jaipur 235",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.84743,
    lng: 75.77084,
    geohash5: "26.85,75.75",
    isActive: true,
    tags: ["laundry", "parking", "cctv"],
  },
  {
    name: "Warden Kolkata 236",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.5077,
    lng: 88.37422,
    geohash5: "22.50,88.35",
    isActive: false,
    tags: ["pool", "gym", "cowork", "laundry"],
  },
  {
    name: "Warden Kochi 237",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 10.03029,
    lng: 76.30399,
    geohash5: "10.05,76.30",
    isActive: true,
    tags: ["housekeeping", "power-backup", "ac", "pool"],
  },
  {
    name: "Warden Pune 238",
    city: "Pune",
    state: "Maharashtra",
    country: "India",
    lat: 18.56778,
    lng: 73.8128,
    geohash5: "18.55,73.80",
    isActive: true,
    tags: ["pet-friendly"],
  },
  {
    name: "Warden Bengaluru 239",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.96434,
    lng: 77.59126,
    geohash5: "12.95,77.60",
    isActive: true,
    tags: ["parking", "power-backup", "premium"],
  },
  {
    name: "Warden Mumbai 240",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.09823,
    lng: 72.86197,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["premium", "cctv", "gym"],
  },
  {
    name: "Warden Kochi 241",
    city: "Kochi",
    state: "Kerala",
    country: "India",
    lat: 9.9821,
    lng: 76.27426,
    geohash5: "10.00,76.25",
    isActive: true,
    tags: ["wifi", "gym", "parking"],
  },
  {
    name: "Warden Kolkata 242",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.59715,
    lng: 88.41598,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: ["wifi", "premium", "cafeteria", "laundry", "budget", "parking"],
  },
  {
    name: "Warden Bengaluru 243",
    city: "Bengaluru",
    state: "Karnataka",
    country: "India",
    lat: 12.91371,
    lng: 77.63918,
    geohash5: "12.90,77.65",
    isActive: false,
    tags: [
      "pet-friendly",
      "power-backup",
      "near-metro",
      "budget",
      "housekeeping",
    ],
  },
  {
    name: "Warden Chennai 244",
    city: "Chennai",
    state: "Tamil Nadu",
    country: "India",
    lat: 13.07308,
    lng: 80.26697,
    geohash5: "13.05,80.25",
    isActive: true,
    tags: ["near-metro"],
  },
  {
    name: "Warden Kolkata 245",
    city: "Kolkata",
    state: "West Bengal",
    country: "India",
    lat: 22.6065,
    lng: 88.41641,
    geohash5: "22.60,88.40",
    isActive: true,
    tags: [
      "ac",
      "female-only",
      "power-backup",
      "cowork",
      "housekeeping",
      "pet-friendly",
    ],
  },
  {
    name: "Warden Jaipur 246",
    city: "Jaipur",
    state: "Rajasthan",
    country: "India",
    lat: 26.91964,
    lng: 75.80913,
    geohash5: "26.90,75.80",
    isActive: true,
    tags: ["budget", "cowork", "gym"],
  },
  {
    name: "Warden Hyderabad 247",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.42668,
    lng: 78.42115,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["premium", "housekeeping"],
  },
  {
    name: "Warden Hyderabad 248",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.4524,
    lng: 78.3953,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["budget", "cafeteria", "gym"],
  },
  {
    name: "Warden Hyderabad 249",
    city: "Hyderabad",
    state: "Telangana",
    country: "India",
    lat: 17.44074,
    lng: 78.39503,
    geohash5: "17.45,78.40",
    isActive: true,
    tags: ["pet-friendly", "near-metro", "gym"],
  },
  {
    name: "Warden Mumbai 250",
    city: "Mumbai",
    state: "Maharashtra",
    country: "India",
    lat: 19.08044,
    lng: 72.87471,
    geohash5: "19.10,72.85",
    isActive: true,
    tags: ["female-only"],
  },
];

================
File: backend/prisma/seed.ts
================
import { PrismaClient } from "@prisma/client";
import { propertiesData } from "./seed.data";

const prisma = new PrismaClient();

async function main() {
  console.log(`Seeding ${propertiesData.length} properties...`);
  await prisma.property.deleteMany(); // idempotent
  await prisma.property.createMany({ data: propertiesData });
  console.log("Done.");
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

================
File: backend/src/__tests__/api.test.ts
================
import request from 'supertest';
import app from '../index';

describe('API Integration Tests', () => {
  describe('GET /health', () => {
    it('should return health status', async () => {
      const response = await request(app).get('/health');
      
      expect(response.status).toBe(200);
      expect(response.body.status).toBe('healthy');
    });
  });

  describe('GET /get-properties', () => {
    it('should return properties without filters', async () => {
      const response = await request(app).get('/get-properties');
      
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(Array.isArray(response.body.data)).toBe(true);
    });

    it('should filter by city', async () => {
      const response = await request(app)
        .get('/get-properties')
        .query({ city: 'Chennai' });
      
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
    });

    it('should handle weather filters', async () => {
      const response = await request(app)
        .get('/get-properties')
        .query({ tempMin: 20, tempMax: 35 });
      
      expect(response.status).toBe(200);
      expect(response.body.metrics).toBeDefined();
    });
  });

  describe('GET /suggestions', () => {
    it('should return suggestions', async () => {
      const response = await request(app)
        .get('/suggestions')
        .query({ q: 'war' });
      
      expect(response.status).toBe(200);
      expect(Array.isArray(response.body.data)).toBe(true);
    });

    it('should handle empty query', async () => {
      const response = await request(app).get('/suggestions');
      
      expect(response.status).toBe(200);
      expect(response.body.data).toEqual([]);
    });
  });

  describe('GET /metrics', () => {
    it('should return performance metrics', async () => {
      const response = await request(app).get('/metrics');
      
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.performance).toBeDefined();
    });
  });
});

================
File: backend/src/database/prisma.ts
================
import { PrismaClient } from "@prisma/client";

const prismaClientSingleton = () => {
  return new PrismaClient();
};

const prisma = prismaClientSingleton();

export { prisma };

================
File: backend/src/jobs/weather-update.job.ts
================
// backend/src/jobs/weather-update.job.ts - DISABLED (weather is always fetched fresh)

// Weather update job is disabled since we're fetching weather data fresh on every request
export const scheduleEnhancedWeatherUpdates = () => {
  console.log('⚠️ Weather update job is DISABLED - weather data is fetched fresh on demand');
  console.log('🌤️ All weather requests now get real-time data from Open-Meteo API');
};

================
File: backend/src/services/__tests__/weather.service.test.ts
================
import { WeatherService } from '../weather.service';
import Redis from 'ioredis';
import axios from 'axios';

jest.mock('ioredis');
jest.mock('axios');

const mockRedis = {
  mget: jest.fn(),
  setex: jest.fn(),
  pipeline: jest.fn(() => ({ exec: jest.fn() })),
} as any;

describe('WeatherService', () => {
  let weatherService: WeatherService;

  beforeEach(() => {
    (Redis as any).mockImplementation(() => mockRedis);
    weatherService = new WeatherService();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('getWeatherBatch', () => {
    it('should return cached data when available', async () => {
      const coordinates = [{ lat: 13.0827, lng: 80.2707, id: 1 }];
      const cachedWeather = JSON.stringify({
        latitude: 13.0827,
        longitude: 80.2707,
        temperature: 28,
        humidity: 75,
        condition: 'Clear'
      });

      mockRedis.mget.mockResolvedValue([cachedWeather]);

      const result = await weatherService.getWeatherBatch(coordinates);

      expect(result).toHaveLength(1);
      expect(result[0].temperature).toBe(28);
      expect(mockRedis.mget).toHaveBeenCalledWith('weather:13.0827:80.2707');
    });

    it('should fetch fresh data when cache miss', async () => {
      const coordinates = [{ lat: 13.0827, lng: 80.2707, id: 1 }];
      
      mockRedis.mget.mockResolvedValue([null]);
      (axios.get as jest.Mock).mockResolvedValue({
        data: {
          current: {
            temperature_2m: 30,
            relative_humidity_2m: 80,
            weather_code: 0
          }
        }
      });

      const result = await weatherService.getWeatherBatch(coordinates);

      expect(result).toHaveLength(1);
      expect(result[0].temperature).toBe(30);
      expect(axios.get).toHaveBeenCalled();
    });
  });

  describe('filterByWeather', () => {
    it('should filter by temperature range', () => {
      const weatherData = [
        { temperature: 25, humidity: 60, condition: 'Clear' } as any,
        { temperature: 35, humidity: 70, condition: 'Cloudy' } as any,
      ];

      const filtered = weatherService.filterByWeather(weatherData, { tempMin: 30 });
      
      expect(filtered).toHaveLength(1);
      expect(filtered[0].temperature).toBe(35);
    });
  });
});

================
File: backend/src/services/cache.service.ts
================
import { redis } from './redis.service';

export class CacheService {
  private readonly DEFAULT_TTL = 7200; // 2 hours

  async get<T>(key: string): Promise<T | null> {
    try {
      const data = await redis.get(key);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error(`Cache get error for key ${key}:`, error);
      return null;
    }
  }

  async set<T>(key: string, value: T, ttl: number = this.DEFAULT_TTL): Promise<boolean> {
    try {
      await redis.setex(key, ttl, JSON.stringify(value));
      return true;
    } catch (error) {
      console.error(`Cache set error for key ${key}:`, error);
      return false;
    }
  }

  async del(key: string): Promise<boolean> {
    try {
      await redis.del(key);
      return true;
    } catch (error) {
      console.error(`Cache delete error for key ${key}:`, error);
      return false;
    }
  }

  async exists(key: string): Promise<boolean> {
    try {
      const result = await redis.exists(key);
      return result === 1;
    } catch (error) {
      console.error(`Cache exists error for key ${key}:`, error);
      return false;
    }
  }

  // Weather cache helpers
  getCacheKey(prefix: string, ...parts: (string | number)[]): string {
    return `${prefix}:${parts.join(':')}`;
  }

  async getWeatherCache(lat: number, lng: number): Promise<any | null> {
    const key = this.getCacheKey('weather', lat, lng);
    return this.get(key);
  }

  async setWeatherCache(lat: number, lng: number, data: any, ttl: number = 1800): Promise<boolean> {
    const key = this.getCacheKey('weather', lat, lng);
    return this.set(key, data, ttl);
  }

  // Property search cache
  async getSearchCache(searchKey: string): Promise<any | null> {
    const key = this.getCacheKey('search', searchKey);
    return this.get(key);
  }

  async setSearchCache(searchKey: string, data: any, ttl: number = 900): Promise<boolean> {
    const key = this.getCacheKey('search', searchKey);
    return this.set(key, data, ttl);
  }

  // Clear all cache
  async flushAll(): Promise<boolean> {
    try {
      await redis.flushall();
      return true;
    } catch (error) {
      console.error('Cache flush error:', error);
      return false;
    }
  }

  // Get cache stats
  async getStats(): Promise<any> {
    try {
      const info = await redis.info();
      return {
        connected: true,
        info: info
      };
    } catch (error) {
      return {
        connected: false,
        error: (error as Error).message
      };
    }
  }
}

export const cacheService = new CacheService();

================
File: backend/src/services/redis-property.service.ts
================
import { prisma } from '../database/prisma';
import { redis } from './redis.service';
import { WeatherService, WeatherData, WeatherFilters } from './weather.service';

export interface EnhancedSearchFilters extends WeatherFilters {
  searchText?: string;
  city?: string;
  state?: string;
  limit?: number;
  offset?: number;
}

export interface PropertyWithWeather {
  id: number;
  name: string;
  city: string;
  state: string;
  country: string;
  lat: number;
  lng: number;
  isActive: boolean;
  tags: string[];
  weather?: {
    temperature: number;
    humidity: number;
    condition: string;
    lastUpdated: Date;
  };
}

export class RedisPropertyService {
  private weatherService: WeatherService;
  private readonly PROPERTIES_KEY = 'properties:all';
  private readonly WEATHER_KEY_PREFIX = 'weather:';
  private readonly WEATHER_CACHE_TTL = 1800; // 30 minutes

  constructor() {
    this.weatherService = new WeatherService();
    this.initializeService();
  }

  private async initializeService(): Promise<void> {
    try {
      console.log('🚀 Initializing Redis Property Service...');
      await this.syncPropertiesToRedis();
      console.log('✅ Redis Property Service initialized');
    } catch (error) {
      console.error('❌ Redis Property Service initialization failed:', error);
    }
  }

  async syncPropertiesToRedis(): Promise<void> {
    try {
      console.log('📊 Syncing all properties to Redis...');
      
      const properties = await prisma.property.findMany({
        where: { isActive: true },
        orderBy: { name: 'asc' }
      });

      const redisData = properties.map(prop => ({
        id: prop.id,
        name: prop.name,
        city: prop.city || '',
        state: prop.state || '',
        country: prop.country || 'India',
        lat: prop.lat || 0,
        lng: prop.lng || 0,
        isActive: prop.isActive,
        tags: Array.isArray(prop.tags) ? prop.tags.filter((tag): tag is string => typeof tag === 'string') : []
      }));

      await redis.set(this.PROPERTIES_KEY, JSON.stringify(redisData), 'EX', 3600); // 1 hour cache
      console.log(`✅ Synced ${properties.length} properties to Redis`);
    } catch (error) {
      console.error('❌ Failed to sync properties to Redis:', error);
    }
  }

  async searchProperties(filters: EnhancedSearchFilters): Promise<{
    properties: PropertyWithWeather[];
    total: number;
    hasMore: boolean;
    searchTime: number;
    source: string;
  }> {
    try {
      const startTime = Date.now();

      // Get properties from Redis
      const cachedProperties = await redis.get(this.PROPERTIES_KEY);
      let properties: any[] = [];

      if (cachedProperties) {
        properties = JSON.parse(cachedProperties);
        console.log(`📊 Loaded ${properties.length} properties from Redis cache`);
      } else {
        // Fallback to database if Redis cache is empty
        console.log('⚠️ Redis cache empty, loading from database...');
        await this.syncPropertiesToRedis();
        const freshCache = await redis.get(this.PROPERTIES_KEY);
        properties = freshCache ? JSON.parse(freshCache) : [];
      }

      // Apply basic filters
      let filteredProperties = properties.filter(prop => {
        if (filters.searchText && !prop.name.toLowerCase().includes(filters.searchText.toLowerCase())) return false;
        if (filters.city && !prop.city.toLowerCase().includes(filters.city.toLowerCase())) return false;
        if (filters.state && !prop.state.toLowerCase().includes(filters.state.toLowerCase())) return false;
        return true;
      });

      console.log(`🔍 After basic filtering: ${filteredProperties.length} properties`);

      // For efficient pagination, we need to apply weather filters first to get accurate totals
      // But only fetch weather for the current page to optimize performance
      let weatherFilteredProperties = filteredProperties;
      let totalWithoutWeatherFilters = filteredProperties.length;

      // If weather filters are applied, we need to get weather for all to filter correctly
      const hasWeatherFilters = filters.tempMin !== undefined || filters.tempMax !== undefined || 
                               filters.humidityMin !== undefined || filters.humidityMax !== undefined ||
                               filters.weatherCondition !== undefined;

      if (hasWeatherFilters) {
        // Get weather for all filtered properties to apply weather filters
        console.log('🌡️ Weather filters detected, fetching weather for all properties...');
        const allWithWeather = await this.attachWeatherData(filteredProperties);
        weatherFilteredProperties = this.applyWeatherFilters(allWithWeather, filters);
        console.log(`🔍 After weather filtering: ${weatherFilteredProperties.length} properties`);
      }

      // Apply pagination to the final filtered results
      const limit = filters.limit || 20;
      const offset = filters.offset || 0;
      const paginatedProperties = weatherFilteredProperties.slice(offset, offset + limit);
      
      // If no weather filters were applied, fetch weather only for the current page
      let finalProperties: PropertyWithWeather[];
      if (hasWeatherFilters) {
        finalProperties = paginatedProperties;
      } else {
        finalProperties = await this.attachWeatherData(paginatedProperties);
      }

      const total = weatherFilteredProperties.length;
      const hasMore = offset + limit < total;

      const searchTime = Date.now() - startTime;
      console.log(`🚀 Redis search completed in ${searchTime}ms - Page ${Math.floor(offset/limit) + 1} (${finalProperties.length}/${total})`);

      return {
        properties: finalProperties,
        total,
        hasMore,
        searchTime,
        source: 'redis_with_weather_cache'
      };
    } catch (error) {
      console.error('❌ Redis property search failed:', error);
      throw error;
    }
  }

  private async attachWeatherData(properties: any[]): Promise<PropertyWithWeather[]> {
    const weatherPromises = properties.map(async (prop) => {
      if (!prop.lat || !prop.lng) {
        return {
          ...prop,
          weather: {
            temperature: 25,
            humidity: 60,
            condition: 'Clear',
            lastUpdated: new Date()
          }
        };
      }

      const weatherKey = `${this.WEATHER_KEY_PREFIX}${prop.lat.toFixed(4)},${prop.lng.toFixed(4)}`;
      
      // Try to get weather from Redis cache
      const cachedWeather = await redis.get(weatherKey);
      if (cachedWeather) {
        const weather = JSON.parse(cachedWeather);
        return {
          ...prop,
          weather: {
            temperature: weather.temperature,
            humidity: weather.humidity,
            condition: weather.condition,
            lastUpdated: new Date(weather.lastUpdated)
          }
        };
      }

      // If not cached, fetch fresh weather and cache it
      try {
        const freshWeather = await this.weatherService.getWeatherBatch([{
          id: prop.id,
          lat: prop.lat,
          lng: prop.lng
        }]);

        if (freshWeather.length > 0) {
          const weather = freshWeather[0];
          
          // Cache the weather data
          await redis.set(
            weatherKey,
            JSON.stringify({
              temperature: weather.temperature,
              humidity: weather.humidity,
              condition: weather.condition,
              lastUpdated: weather.lastUpdated
            }),
            'EX',
            this.WEATHER_CACHE_TTL
          );

          return {
            ...prop,
            weather: {
              temperature: weather.temperature,
              humidity: weather.humidity,
              condition: weather.condition,
              lastUpdated: weather.lastUpdated
            }
          };
        }
      } catch (error) {
        console.error(`❌ Weather fetch failed for ${prop.id}:`, error);
      }

      // Default weather if fetch fails
      return {
        ...prop,
        weather: {
          temperature: 25,
          humidity: 60,
          condition: 'Clear',
          lastUpdated: new Date()
        }
      };
    });

    // Process weather requests in parallel batches of 10 to avoid overwhelming the API
    const batchSize = 10;
    const results: PropertyWithWeather[] = [];
    
    for (let i = 0; i < weatherPromises.length; i += batchSize) {
      const batch = weatherPromises.slice(i, i + batchSize);
      const batchResults = await Promise.all(batch);
      results.push(...batchResults);
      
      // Small delay between batches
      if (i + batchSize < weatherPromises.length) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    return results;
  }

  private applyWeatherFilters(properties: PropertyWithWeather[], filters: WeatherFilters): PropertyWithWeather[] {
    if (!filters.tempMin && !filters.tempMax && !filters.humidityMin && !filters.humidityMax && !filters.weatherCondition) {
      return properties;
    }

    return properties.filter(prop => {
      if (!prop.weather) return false;
      
      if (filters.tempMin !== undefined && prop.weather.temperature < filters.tempMin) return false;
      if (filters.tempMax !== undefined && prop.weather.temperature > filters.tempMax) return false;
      if (filters.humidityMin !== undefined && prop.weather.humidity < filters.humidityMin) return false;
      if (filters.humidityMax !== undefined && prop.weather.humidity > filters.humidityMax) return false;
      if (filters.weatherCondition && prop.weather.condition !== filters.weatherCondition) return false;
      
      return true;
    });
  }

  async getServiceStats(): Promise<any> {
    try {
      const cachedProperties = await redis.get(this.PROPERTIES_KEY);
      const propertyCount = cachedProperties ? JSON.parse(cachedProperties).length : 0;
      
      // Get weather cache count
      const weatherKeys = await redis.keys(`${this.WEATHER_KEY_PREFIX}*`);
      
      return {
        redis: {
          properties_cached: propertyCount,
          weather_cache_count: weatherKeys.length,
          connection_status: 'connected'
        },
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('❌ Failed to get Redis service stats:', error);
      return {
        redis: {
          connection_status: 'error',
          error: (error as Error).message
        },
        timestamp: new Date().toISOString()
      };
    }
  }
}

================
File: backend/src/services/redis-search.service.ts
================
import { Redis } from 'ioredis';
import { Property } from '@prisma/client';
import { PropertySearchParams, SearchResult } from '../types/search.types';

export class RedisSearchService {
  private redis: Redis;
  private readonly INDEX_NAME = 'properties_idx';

  constructor(redis: Redis) {
    this.redis = redis;
  }

  async createIndex(): Promise<void> {
    try {
      // Drop existing index if it exists
      await this.redis.call('FT.DROPINDEX', this.INDEX_NAME).catch(() => {});

      // Create new index with schema
      await this.redis.call(
        'FT.CREATE',
        this.INDEX_NAME,
        'ON', 'HASH',
        'PREFIX', '1', 'property:',
        'SCHEMA',
        'id', 'NUMERIC', 'SORTABLE',
        'name', 'TEXT', 'WEIGHT', '2.0',
        'displayName', 'TEXT',
        'city', 'TEXT', 'SORTABLE',
        'displayCity', 'TEXT',
        'state', 'TEXT',
        'displayState', 'TEXT',
        'lat', 'NUMERIC',
        'lng', 'NUMERIC',
        'isActive', 'TAG',
        'temperature', 'NUMERIC',
        'humidity', 'NUMERIC',
        'condition', 'TAG'
      );
      
      console.log('✅ Redis Search index created');
    } catch (error) {
      console.error('❌ Failed to create Redis Search index:', error);
      throw error;
    }
  }

  async indexProperty(property: Property, weather?: any): Promise<void> {
    try {
      const key = `property:${property.id}`;
      const data = {
        id: property.id,
        name: (property.name || '').toLowerCase(),
        displayName: property.name || '',
        city: (property.city || '').toLowerCase(),
        displayCity: property.city || '',
        state: (property.state || '').toLowerCase(),
        displayState: property.state || '',
        lat: property.lat || 0,
        lng: property.lng || 0,
        isActive: property.isActive ? '1' : '0',
        temperature: weather?.temperature || 0,
        humidity: weather?.humidity || 0,
        condition: weather?.condition || ''
      };

      await this.redis.hmset(key, data);
    } catch (error) {
      console.error(`❌ Failed to index property ${property.id}:`, error);
      throw error;
    }
  }

  async bulkIndexProperties(properties: Property[]): Promise<void> {
    if (properties.length === 0) return;

    try {
      const pipeline = this.redis.pipeline();
      
      for (const property of properties) {
        const key = `property:${property.id}`;
        const data = {
          id: property.id,
          name: (property.name || '').toLowerCase(),
          displayName: property.name || '',
          city: (property.city || '').toLowerCase(),
          displayCity: property.city || '',
          state: (property.state || '').toLowerCase(),
          displayState: property.state || '',
          lat: property.lat || 0,
          lng: property.lng || 0,
          isActive: property.isActive ? '1' : '0',
          temperature: 0,
          humidity: 0,
          condition: ''
        };
        pipeline.hmset(key, data);
      }
      
      await pipeline.exec();
      console.log(`✅ Bulk indexed ${properties.length} properties to Redis Search`);
    } catch (error) {
      console.error('❌ Bulk indexing failed:', error);
      throw error;
    }
  }

  async searchProperties(params: PropertySearchParams): Promise<SearchResult> {
    try {
      const query = this.buildQuery(params);
      const sortBy = this.buildSort(params);
      
      const searchArgs = [
        'FT.SEARCH',
        this.INDEX_NAME,
        query,
        'LIMIT',
        params.offset || 0,
        params.limit || 20
      ];

      if (sortBy) {
        searchArgs.push('SORTBY', sortBy.field, sortBy.direction);
      }

      const startTime = Date.now();
      const result = await this.redis.call('FT.SEARCH', this.INDEX_NAME, query, 'LIMIT', params.offset || 0, params.limit || 20) as any[];
      const searchTime = Date.now() - startTime;

      const total = result[0] as number;
      const properties = [];

      // Parse results (Redis returns [count, key1, fields1, key2, fields2, ...])
      for (let i = 1; i < result.length; i += 2) {
        const fields = result[i + 1] as string[];
        const property: any = {};
        
        for (let j = 0; j < fields.length; j += 2) {
          const key = fields[j];
          const value = fields[j + 1];
          
          if (key === 'id' || key === 'lat' || key === 'lng' || key === 'temperature' || key === 'humidity') {
            property[key] = parseFloat(value) || 0;
          } else if (key === 'isActive') {
            property[key] = value === '1';
          } else if (key === 'displayName') {
            property['name'] = value;
          } else if (key === 'displayCity') {
            property['city'] = value;
          } else if (key === 'displayState') {
            property['state'] = value;
          } else if (key !== 'name' && key !== 'city' && key !== 'state') {
            property[key] = value;
          }
        }
        
        properties.push(property);
      }

      return {
        properties,
        total,
        searchTime,
        hasMore: (params.offset || 0) + properties.length < total
      };
    } catch (error) {
      console.error('❌ Redis Search failed:', error);
      throw error;
    }
  }

  private buildQuery(params: PropertySearchParams): string {
    const conditions: string[] = ['@isActive:{1}'];

    if (params.searchText) {
      const cleanQuery = this.escapeQuery(params.searchText.toLowerCase());
      conditions.push(`@name:(*${cleanQuery}*)`);
    }

    if (params.city) {
      const cleanCity = this.escapeQuery(params.city.toLowerCase());
      conditions.push(`@city:(*${cleanCity}*)`);
    }

    if (params.state) {
      const cleanState = this.escapeQuery(params.state.toLowerCase());
      conditions.push(`@state:(*${cleanState}*)`);
    }

    if (params.tempMin !== undefined) {
      conditions.push(`@temperature:[${params.tempMin} +inf]`);
    }

    if (params.tempMax !== undefined) {
      conditions.push(`@temperature:[-inf ${params.tempMax}]`);
    }

    if (params.humidityMin !== undefined) {
      conditions.push(`@humidity:[${params.humidityMin} +inf]`);
    }

    if (params.humidityMax !== undefined) {
      conditions.push(`@humidity:[-inf ${params.humidityMax}]`);
    }

    if (params.weatherCondition) {
      conditions.push(`@condition:{${this.escapeTag(params.weatherCondition)}}`);
    }

    return conditions.length > 0 ? conditions.join(' ') : '*';
  }

  private buildSort(params: PropertySearchParams): { field: string; direction: string } | null {
    if (!params.sortBy) return null;

    const direction = params.sortOrder === 'desc' ? 'DESC' : 'ASC';

    switch (params.sortBy) {
      case 'name':
        return { field: 'name', direction };
      case 'city':
        return { field: 'city', direction };
      default:
        return { field: 'id', direction };
    }
  }

  private escapeQuery(query: string): string {
    return query.replace(/[^a-zA-Z0-9\s]/g, '');
  }

  private escapeTag(tag: string): string {
    return tag.replace(/[,.<>{}[\]"':;!@#$%^&*()+=~|]/g, '\\$&');
  }

  async deleteProperty(propertyId: number): Promise<void> {
    try {
      await this.redis.del(`property:${propertyId}`);
    } catch (error) {
      console.error(`❌ Failed to delete property ${propertyId}:`, error);
    }
  }

  async updatePropertyWeather(propertyId: number, weather: any): Promise<void> {
    try {
      const key = `property:${propertyId}`;
      await this.redis.hmset(key, {
        temperature: weather.temperature || 0,
        humidity: weather.humidity || 0,
        condition: weather.condition || ''
      });
    } catch (error) {
      console.error(`❌ Failed to update weather for property ${propertyId}:`, error);
    }
  }

  async getIndexInfo(): Promise<any> {
    try {
      return await this.redis.call('FT.INFO', this.INDEX_NAME);
    } catch (error) {
      console.error('❌ Failed to get index info:', error);
      return null;
    }
  }
}

================
File: backend/src/services/redis.service.ts
================
import { Redis } from 'ioredis';

export class RedisConnection {
  private static instance: Redis;

  public static getInstance(): Redis {
    if (!RedisConnection.instance) {
      RedisConnection.instance = RedisConnection.createConnection();
    }
    return RedisConnection.instance;
  }

  private static createConnection(): Redis {
    const redisUrl = process.env.REDIS_URL || process.env.REDIS_URL || '';
    
    const redis = new Redis(redisUrl, {
      maxRetriesPerRequest: 3,
      connectTimeout: 10000,
      commandTimeout: 5000,
      family: 4,
      keepAlive: 30000,
      enableReadyCheck: true,
      lazyConnect: false,
      db: 0,
      enableOfflineQueue: false,
      connectionName: 'warden-app'
    });

    redis.on('connect', () => {
      console.log('✅ Connected to Redis (ElastiCache)');
    });

    redis.on('error', (error) => {
      console.error('❌ Redis connection error:', error);
    });

    redis.on('ready', () => {
      console.log('🚀 Redis is ready to receive commands');
    });

    return redis;
  }

  public static async close(): Promise<void> {
    if (RedisConnection.instance) {
      await RedisConnection.instance.quit();
    }
  }
}

// Export singleton instance
export const redis = RedisConnection.getInstance();

================
File: backend/src/services/weather-cache.service.ts
================
// backend/src/services/weather-cache.service.ts - Deprecated service (weather always fresh)
export class WeatherCacheService {
  constructor() {
    console.log('⚠️ WeatherCacheService is deprecated - weather is always fetched fresh now');
  }

  async updatePropertyWeather(propertyId: number, lat: number, lng: number): Promise<void> {
    console.log('⚠️ WeatherCacheService.updatePropertyWeather is deprecated - weather is fetched fresh on demand');
  }

  async updateAllPropertiesWeather(properties: Array<{id: number, lat: number, lng: number}>): Promise<void> {
    console.log('⚠️ WeatherCacheService.updateAllPropertiesWeather is deprecated - weather is fetched fresh on demand');
  }

  async getPropertyWeather(propertyId: number): Promise<any | null> {
    console.log('⚠️ WeatherCacheService.getPropertyWeather is deprecated - weather is fetched fresh on demand');
    return null;
  }

  async getAllCachedWeather(): Promise<any[]> {
    console.log('⚠️ WeatherCacheService.getAllCachedWeather is deprecated - weather is fetched fresh on demand');
    return [];
  }

  async getWeatherStats(): Promise<any> {
    return {
      totalWeatherEntries: 0,
      cacheStatus: 'disabled',
      lastUpdated: new Date(),
      cacheTTL: 0,
      mode: 'always-fresh',
      message: 'Weather caching is disabled - always fetching fresh data on demand'
    };
  }
}

================
File: backend/src/services/weather.service.ts
================
// backend/src/services/weather.service.ts - REPLACE ENTIRE FILE
import axios from 'axios';

export interface WeatherData {
  latitude: number;
  longitude: number;
  temperature: number;
  humidity: number;
  weatherCode: number;
  condition: string;
  lastUpdated: Date;
}

export interface WeatherFilters {
  tempMin?: number;
  tempMax?: number;
  humidityMin?: number;
  humidityMax?: number;
  weatherCondition?: string;
}

export class WeatherService {
  private readonly BASE_URL = 'https://api.open-meteo.com/v1/forecast';

  async getWeatherBatch(coordinates: Array<{lat: number, lng: number, id: number}>): Promise<WeatherData[]> {
    // console.log(`🌤️ Fetching FRESH weather for ${coordinates.length} locations (NO CACHE)...`);
    
    const results: WeatherData[] = [];

    // Always fetch fresh data - NO CACHE
    for (const coord of coordinates) {
      try {
        const weather = await this.fetchFreshWeather(coord.lat, coord.lng);
        results.push(weather);
        
        // console.log(`✅ Fresh weather for ${coord.lat},${coord.lng}: ${weather.temperature}°C, ${weather.humidity}%, ${weather.condition}`);
        
        // Small delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 150));
      } catch (error) {
        console.error(`❌ Weather failed for ${coord.lat},${coord.lng}:`, error);
        const defaultWeather = this.createDefaultWeather(coord.lat, coord.lng);
        results.push(defaultWeather);
      }
    }

    return results;
  }

  private async fetchFreshWeather(lat: number, lng: number): Promise<WeatherData> {
    // console.log(`🌐 API CALL: ${lat},${lng}`);
    
    const response = await axios.get(this.BASE_URL, {
      params: {
        latitude: lat.toFixed(4),
        longitude: lng.toFixed(4),
        current: 'temperature_2m,relative_humidity_2m,weather_code',
        timezone: 'auto'
      },
      timeout: 5000,
      headers: {
        'User-Agent': 'WeatherApp/1.0'
      }
    });

    // console.log(`📡 RAW API Response:`, JSON.stringify(response.data, null, 2));

    if (response.data?.current) {
      const current = response.data.current;
      
      const weather: WeatherData = {
        latitude: lat,
        longitude: lng,
        temperature: Math.round(parseFloat(current.temperature_2m) || 25),
        humidity: Math.round(parseFloat(current.relative_humidity_2m) || 60),
        weatherCode: current.weather_code || 0,
        condition: this.mapWeatherCode(current.weather_code || 0),
        lastUpdated: new Date()
      };

      return weather;
    } else {
      throw new Error('Invalid API response structure');
    }
  }

  private createDefaultWeather(lat: number, lng: number): WeatherData {
    // console.log(`⚠️ Using default weather for ${lat},${lng}`);
    return {
      latitude: lat,
      longitude: lng,
      temperature: 25,
      humidity: 60,
      weatherCode: 0,
      condition: 'Clear',
      lastUpdated: new Date()
    };
  }

  private mapWeatherCode(code: number): string {
    if (code === 0) return 'Clear';
    if (code >= 1 && code <= 3) return 'Cloudy';
    if (code >= 51 && code <= 57) return 'Drizzle';
    if ((code >= 61 && code <= 67) || (code >= 80 && code <= 82)) return 'Rainy';
    if ((code >= 71 && code <= 77) || (code >= 85 && code <= 86)) return 'Snow';
    return 'Clear';
  }

  filterByWeather(weatherData: WeatherData[], filters: WeatherFilters): WeatherData[] {
    return weatherData.filter(data => {
      if (filters.tempMin !== undefined && data.temperature < filters.tempMin) return false;
      if (filters.tempMax !== undefined && data.temperature > filters.tempMax) return false;
      if (filters.humidityMin !== undefined && data.humidity < filters.humidityMin) return false;
      if (filters.humidityMax !== undefined && data.humidity > filters.humidityMax) return false;
      if (filters.weatherCondition && data.condition !== filters.weatherCondition) return false;
      return true;
    });
  }
}

================
File: backend/src/types/search.types.ts
================
export interface SearchResult {
  properties: any[];
  total: number;
  searchTime: number;
  hasMore: boolean;
}

export interface WeatherData {
  temperature: number;
  humidity: number;
  condition: string;
  weatherCode: number;
  lastUpdated?: Date;
}

export interface PropertySearchParams {
  searchText?: string;
  city?: string;
  state?: string;
  tempMin?: number;
  tempMax?: number;
  humidityMin?: number;
  humidityMax?: number;
  weatherCondition?: string;
  tags?: string[];
  lat?: number;
  lng?: number;
  radiusKm?: number;
  limit?: number;
  offset?: number;
  sortBy?: 'name' | 'city' | 'distance' | '_score';
  sortOrder?: 'asc' | 'desc';
}

export interface PerformanceMetrics {
  searchTime: number;
  totalResults: number;
  cacheHit: boolean;
  source: 'elasticsearch' | 'database' | 'cache';
}

================
File: backend/src/use-cases/getProperties.ts
================
import { Request, Response } from "express";
import { RedisPropertyService, EnhancedSearchFilters } from "../services/redis-property.service";

const redisPropertyService = new RedisPropertyService();

export const getProperties = async (req: Request, res: Response) => {
  try {
    const startTime = Date.now();
    
    const filters: EnhancedSearchFilters = {
      searchText: req.query.searchText as string,
      city: req.query.city as string,
      state: req.query.state as string,
      tempMin: req.query.tempMin ? parseFloat(req.query.tempMin as string) : undefined,
      tempMax: req.query.tempMax ? parseFloat(req.query.tempMax as string) : undefined,
      humidityMin: req.query.humidityMin ? parseFloat(req.query.humidityMin as string) : undefined,
      humidityMax: req.query.humidityMax ? parseFloat(req.query.humidityMax as string) : undefined,
      weatherCondition: req.query.weatherCondition as string,
      limit: req.query.limit ? parseInt(req.query.limit as string) : 20,
      offset: req.query.offset ? parseInt(req.query.offset as string) : 0
    };

    // Validate filters
    if (filters.tempMin !== undefined && (filters.tempMin < -20 || filters.tempMin > 50)) {
      return res.status(400).json({ error: "Temperature min must be between -20°C and 50°C" });
    }
    
    if (filters.tempMax !== undefined && (filters.tempMax < -20 || filters.tempMax > 50)) {
      return res.status(400).json({ error: "Temperature max must be between -20°C and 50°C" });
    }

    if (filters.humidityMin !== undefined && (filters.humidityMin < 0 || filters.humidityMin > 100)) {
      return res.status(400).json({ error: "Humidity min must be between 0% and 100%" });
    }

    if (filters.humidityMax !== undefined && (filters.humidityMax < 0 || filters.humidityMax > 100)) {
      return res.status(400).json({ error: "Humidity max must be between 0% and 100%" });
    }

    const validWeatherConditions = ['Clear', 'Cloudy', 'Drizzle', 'Rainy', 'Snow'];
    if (filters.weatherCondition && !validWeatherConditions.includes(filters.weatherCondition)) {
      return res.status(400).json({ 
        error: "Invalid weather condition",
        validConditions: validWeatherConditions 
      });
    }

    // ✅ USE REDIS PROPERTY SERVICE
    const result = await redisPropertyService.searchProperties(filters);
    const totalTime = Date.now() - startTime;

    console.log(`🚀 Search completed in ${totalTime}ms (${result.source})`);

    return res.json({
      success: true,
      data: result.properties,
      pagination: {
        total: result.total,
        limit: filters.limit || 20,
        offset: filters.offset || 0,
        hasMore: result.hasMore,
        currentPage: Math.floor((filters.offset || 0) / (filters.limit || 20)) + 1,
        totalPages: Math.ceil(result.total / (filters.limit || 20))
      },
      performance: {
        searchTime: result.searchTime,
        totalTime,
        source: result.source,
        weatherMode: 'redis-cached'
      },
      filters: {
        applied: filters,
        available: {
          weatherConditions: validWeatherConditions,
          temperatureRange: { min: -20, max: 50 },
          humidityRange: { min: 0, max: 100 }
        }
      },
      metadata: {
        timestamp: new Date().toISOString(),
        version: "5.0.0-redis-only"
      }
    });
  } catch (error) {
    console.error("❌ Error fetching properties:", error);
    return res.status(500).json({ 
      success: false, 
      error: "Internal Server Error",
      message: process.env.NODE_ENV === 'development' ? (error as Error).message : 'Something went wrong',
      timestamp: new Date().toISOString()
    });
  }
};

================
File: backend/src/utils/logger.ts
================
export class Logger {
  static info(message: string, data?: any) {
    console.log(`[INFO] ${new Date().toISOString()} - ${message}`, data || '');
  }

  static warn(message: string, data?: any) {
    console.warn(`[WARN] ${new Date().toISOString()} - ${message}`, data || '');
  }

  static error(message: string, error?: any) {
    console.error(`[ERROR] ${new Date().toISOString()} - ${message}`, error || '');
    
    // In production, send to error tracking service
    if (process.env.NODE_ENV === 'production') {
      this.trackError(message, error);
    }
  }

  private static trackError(message: string, error: any) {
    // Simple error tracking - in production use Sentry, DataDog, etc.
    const errorData = {
      message,
      error: error?.message || error,
      stack: error?.stack,
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV,
    };
    
    // Log to file or external service
    console.error('TRACKED_ERROR:', JSON.stringify(errorData));
  }
}

================
File: backend/src/index.ts
================
import "dotenv/config";
import express from "express";
import compression from "compression";
import { getProperties } from "./use-cases/getProperties";
import { cacheService } from "./services/cache.service";
import { prisma } from "./database/prisma";
import { RedisPropertyService } from "./services/redis-property.service";
import { scheduleEnhancedWeatherUpdates } from "./jobs/weather-update.job";

const app = express();
const port = process.env.PORT || 5001;

// ✅ INITIALIZE REDIS SERVICES
const redisPropertyService = new RedisPropertyService();

// Request deduplication cache
const requestCache = new Map();
const CACHE_DURATION = 10000; // Reduced to 10 seconds

// Request deduplication middleware
const deduplicateRequests = (req: express.Request, res: express.Response, next: express.NextFunction) => {
  // Skip caching for admin endpoints
  if (req.path.startsWith('/admin/')) {
    return next();
  }

  const key = `${req.method}-${req.url}`;
  const cached = requestCache.get(key);
  
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    console.log(`💨 Request cache hit: ${key}`);
    return res.json(cached.data);
  }
  
  const originalSend = res.json.bind(res);
  res.json = (data: any) => {
    requestCache.set(key, {
      data,
      timestamp: Date.now()
    });
    
    // Clean up old cache entries
    if (requestCache.size > 1000) {
      const cutoff = Date.now() - CACHE_DURATION;
      for (const [cacheKey, cache] of requestCache.entries()) {
        if (cache.timestamp < cutoff) {
          requestCache.delete(cacheKey);
        }
      }
    }
    
    return originalSend(data);
  };
  
  next();
};

// Middleware
app.use(compression({ level: 6 })); // Optimize compression
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(deduplicateRequests);

// CORS for development
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', process.env.CORS_ORIGIN || '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Cache-Control', 'public, max-age=300'); // 5 minutes browser cache
  
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  next();
});

// Routes
app.get("/", (_req, res) => res.json({ 
  message: "Warden Weather Test: Redis-Only with Weather Caching",
  version: "5.0.0-redis-only",
  features: [
    "redis-only", 
    "cached-weather-data", 
    "parallel-processing", 
    "request-deduplication",
    "optimized-performance"
  ],
  uptime: process.uptime(),
  timestamp: new Date().toISOString()
}));

app.get("/health", async (_req, res) => {
  try {
    // Check all services health
    const [dbHealth, cacheHealth, serviceHealth] = await Promise.all([
      prisma.$queryRaw`SELECT 1 as health`.catch(() => null),
      cacheService.getStats().catch(() => null),
      redisPropertyService.getServiceStats().catch(() => null)
    ]);

    res.json({ 
      status: "healthy", 
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      services: {
        database: dbHealth ? 'connected' : 'disconnected',
        cache: cacheHealth?.connected ? 'connected' : 'disconnected',
        redis: serviceHealth?.redis ? 'connected' : 'disconnected'
      }
    });
  } catch (error) {
    res.status(500).json({
      status: "unhealthy",
      error: (error as Error).message,
      timestamp: new Date().toISOString()
    });
  }
});

// ✅ MAIN PROPERTIES ENDPOINT
app.get("/get-properties", getProperties);

// Suggestions endpoint for search autocomplete
app.get("/suggestions", async (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q || typeof q !== 'string' || q.length < 2) {
      return res.json({ success: true, data: [] });
    }

    // Try Redis search first for suggestions
    const suggestions = await redisPropertyService.searchProperties({
      searchText: q
    });

    const formattedSuggestions = suggestions.properties.slice(0, 10).map((p: any) => ({
      id: p.id,
      label: `${p.name} - ${p.city}, ${p.state}`,
      value: p.name,
      city: p.city,
      state: p.state
    }));

    res.json({ 
      success: true,
      data: formattedSuggestions,
      source: suggestions.source
    });
  } catch (error) {
    console.error('Suggestions error:', error);
    res.status(500).json({ success: false, data: [] });
  }
});

// ✅ ENHANCED METRICS ENDPOINT
app.get("/metrics", async (req, res) => {
  try {
    const [totalProperties, activeProperties, cities, states, serviceStats] = await Promise.all([
      prisma.property.count(),
      prisma.property.count({ where: { isActive: true } }),
      prisma.property.groupBy({
        by: ['city'],
        where: { isActive: true },
        _count: true
      }),
      prisma.property.groupBy({
        by: ['state'],
        where: { isActive: true },
        _count: true
      }),
      redisPropertyService.getServiceStats()
    ]);

    res.json({
      success: true,
      data: {
        performance: {
          totalProperties,
          activeProperties,
          citiesCount: cities.length,
          statesCount: states.length,
          uptime: process.uptime(),
          memoryUsage: process.memoryUsage(),
          timestamp: new Date().toISOString()
        },
        distribution: {
          topCities: cities
            .sort((a: any, b: any) => b._count - a._count)
            .slice(0, 10)
            .map((c: any) => ({ city: c.city, count: c._count })),
          stateDistribution: states
            .sort((a: any, b: any) => b._count - a._count)
            .map((s: any) => ({ state: s.state, count: s._count }))
        },
        services: serviceStats,
        weather: {
          mode: 'redis-cached',
          message: 'Weather data is cached in Redis for 30 minutes'
        },
        cache: {
          requestCacheSize: requestCache.size,
          requestCacheDuration: CACHE_DURATION
        }
      }
    });
  } catch (error) {
    console.error('Metrics error:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch metrics',
      message: (error as Error).message 
    });
  }
});

// ✅ ADMIN ENDPOINTS
app.post("/admin/sync-all", async (req, res) => {
  try {
    console.log('🔄 Starting Redis sync...');
    await redisPropertyService.syncPropertiesToRedis();
    res.json({ 
      success: true, 
      message: "Full sync to Redis completed",
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('❌ Sync failed:', error);
    res.status(500).json({ 
      success: false, 
      error: "Sync failed",
      message: (error as Error).message 
    });
  }
});

app.post("/admin/sync-weather", async (req, res) => {
  res.json({ 
    success: true, 
    message: "Weather is cached in Redis for 30 minutes - no manual sync needed",
    mode: "redis-cached",
    timestamp: new Date().toISOString()
  });
});

app.delete("/admin/clear-cache", async (req, res) => {
  try {
    await cacheService.flushAll();
    requestCache.clear();
    res.json({ 
      success: true, 
      message: "All caches cleared",
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      error: "Cache clear failed",
      message: (error as Error).message 
    });
  }
});

// ✅ INITIALIZE SERVICES
const initializeServices = async () => {
  try {
    console.log('🚀 Initializing services (Redis-only mode)...');
    
    // Sync property data to Redis
    setTimeout(async () => {
      try {
        console.log('📊 Starting property data sync to Redis...');
        await redisPropertyService.syncPropertiesToRedis();
        console.log('✅ Property data sync completed');
      } catch (error) {
        console.error('❌ Property sync failed:', error);
      }
    }, 3000);

    // Initialize background job (disabled for weather)
    if (process.env.NODE_ENV !== 'test') {
      scheduleEnhancedWeatherUpdates();
      console.log('⏰ Background services initialized (weather job disabled)');
    }

  } catch (error) {
    console.error('❌ Service initialization failed:', error);
  }
};

// Start server
app.listen(port, () => {
  console.log(`🚀 Redis-Only Server running on http://localhost:${port}`);
  console.log(`📊 Health check: http://localhost:${port}/health`);
  console.log(`🏠 Properties API: http://localhost:${port}/get-properties`);
  console.log(`🔍 Suggestions API: http://localhost:${port}/suggestions`);
  console.log(`📈 Metrics API: http://localhost:${port}/metrics`);
  console.log(`🔄 Admin Sync: POST http://localhost:${port}/admin/sync-all`);
  console.log(`🌤️ Weather is CACHED in Redis for 30 minutes!`);
  
  // Initialize services after server starts
  initializeServices();
});

export default app;

================
File: backend/tests/load-test.js
================
import http from 'k6/http';
import { check, sleep } from 'k6';

export const options = {
  stages: [
    { duration: '30s', target: 20 },
    { duration: '1m', target: 50 },
    { duration: '30s', target: 0 },
  ],
  thresholds: {
    http_req_duration: ['p(95)<500'],
    http_req_failed: ['rate<0.1'],
  },
};

const BASE_URL = 'http://localhost:5001';

export default function () {
  // Test property search
  const searchResponse = http.get(`${BASE_URL}/get-properties?limit=10`);
  check(searchResponse, {
    'search status is 200': (r) => r.status === 200,
    'search response time < 500ms': (r) => r.timings.duration < 500,
  });

  // Test with weather filters
  const weatherResponse = http.get(`${BASE_URL}/get-properties?tempMin=20&tempMax=35`);
  check(weatherResponse, {
    'weather filter status is 200': (r) => r.status === 200,
  });

  // Test suggestions
  const suggestResponse = http.get(`${BASE_URL}/suggestions?q=war`);
  check(suggestResponse, {
    'suggestions status is 200': (r) => r.status === 200,
  });

  sleep(1);
}

================
File: backend/tests/performance.test.ts
================
import request from 'supertest';
import app from '../src/index';

describe('Performance Tests', () => {
  test('Properties search should respond within 500ms', async () => {
    const start = Date.now();
    
    const response = await request(app)
      .get('/get-properties')
      .query({
        tempMin: 20,
        tempMax: 35,
        humidityMin: 40,
        humidityMax: 80,
        limit: 20
      });
    
    const duration = Date.now() - start;
    
    expect(response.status).toBe(200);
    expect(duration).toBeLessThan(500);
    expect(response.body.success).toBe(true);
  });

  test('Cached requests should be faster', async () => {
    const query = {
      tempMin: 25,
      tempMax: 30,
      weatherCondition: 'Clear'
    };

    // First request (cache miss)
    const start1 = Date.now();
    await request(app).get('/get-properties').query(query);
    const duration1 = Date.now() - start1;

    // Second request (cache hit)
    const start2 = Date.now();
    await request(app).get('/get-properties').query(query);
    const duration2 = Date.now() - start2;

    expect(duration2).toBeLessThan(duration1 * 0.5); // Should be at least 50% faster
  });
});

================
File: backend/.dockerignore
================
# Logs
*.log
logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependencies
node_modules/

# Build output
dist/
build/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Git
.git
.gitignore

# Docker
Dockerfile*
docker-compose*
.dockerignore

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Tests
coverage/
*.test.js
*.spec.js
__tests__/
tests/

# Misc
README.md
.github/
monitoring/
scripts/

================
File: backend/Dockerfile
================
# Development stage - Fast and simple
FROM node:18-alpine AS development
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies
RUN npm ci --no-audit --no-fund && npm cache clean --force

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

EXPOSE 5001
CMD ["npm", "run", "dev"]

# Production stage - Optimized
FROM node:18-alpine AS production

# Install security updates
RUN apk upgrade --no-cache

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S warden -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --only=production --no-audit --no-fund && npm cache clean --force

# Copy source and build
COPY . .
RUN npx prisma generate
RUN npm run build

# Change ownership to non-root user
RUN chown -R warden:nodejs /app

USER warden

EXPOSE 5001

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5001/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"

CMD ["npm", "start"]

================
File: backend/package.json
================
{
  "name": "warden-weather-test",
  "version": "1.0.0",
  "type": "commonjs",
  "scripts": {
    "dev": "ts-node src/index.ts",
    "build": "tsc",
    "start": "node dist/src/index.js",
    "prisma:gen": "prisma generate",
    "db:seed": "ts-node prisma/seed.ts",
    "db:migrate": "prisma migrate dev",
    "redis:sync": "curl -X POST http://localhost:5001/admin/sync-redis",
    "docker:dev": "docker-compose up --build",
    "docker:prod": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build",
    "docker:monitoring": "docker-compose -f monitoring/docker-compose.monitoring.yml up -d",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:load": "k6 run ../tests/load-test.js"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/jest": "^30.0.0",
    "@types/node": "^20.11.30",
    "@types/supertest": "^6.0.2",
    "jest": "^30.1.3",
    "prisma": "^5.16.0",
    "supertest": "^7.1.4",
    "ts-node": "^10.9.2",
    "typescript": "^5.5.4"
  },
  "dependencies": {
    "@prisma/client": "^6.14.0",
    "@types/compression": "^1.7.5",
    "@types/helmet": "^4.0.0",
    "@types/ioredis": "^4.28.10",
    "@types/node-cron": "^3.0.11",
    "axios": "^1.11.0",
    "bull": "^4.16.5",
    "compression": "^1.7.4",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "helmet": "^7.1.0",
    "ioredis": "^5.7.0",
    "node-cron": "^4.2.1",
    "redis": "^5.8.2",
    "repomix": "^0.3.9" 
  }
}

================
File: backend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "strict": true,
    "outDir": "dist"
  },
  "include": ["src", "prisma"]
}

================
File: docs/migrations.md
================
# Migrations & Seeding (Prisma)

Since this database if shared among candidates you do not have edit access, for obvious reasons. If your solution mandates that colums are to be added, we encourage you do create a local instance so you have complete control. When you do the final submission include this detail.

To create/alter tables, run migrations **against your own local database**. Treat this like a production db, only make changes that won't lose the original data.

### 1. Point Prisma to your own DB

Create a local database (MySQL) and set your `.env`:

```env
DATABASE_URL="mysql://root:password@localhost:3306/warden_local"
```

If the DB doesn’t exist yet, create it:

```sql
CREATE DATABASE warden_local;
```

### 2. Bring your local instance to the deault state

Generate the Prisma client (optional if you already did):

```bash
npx prisma generate

```

Apply default migrations to the database:

```bash
npx prisma migrate deploy
```

Seed data is available in the codebase. To run the seed script:

```bash
npm run db:seed
```

This makes sure that you local database is populate with the initial dataset. You can verify this bu running. Verify this by running the below command, it should be a non zero count.

```sql
SELECT count(*) from Property;

```

### 3. Create and Run Migrations

Make all the required changes in the `prisma.schema` file.

Create a new migration (replace `migration_name` with a meaningful name):

```bash
npx prisma migrate dev --name migration_name
```

Apply pending migrations to the database:

```bash
npx prisma migrate deploy
```

================
File: frontend/components/PropertySearch.tsx
================
'use client';

import { useState, useEffect } from 'react';
import useSWR from 'swr';
import axios from 'axios';

interface SearchFilters {
  searchText: string;
  tempMin: string;
  tempMax: string;
  humidityMin: string;
  humidityMax: string;
  weatherCondition: string;
  city: string;
  limit: number;
  offset: number;
}

const fetcher = (url: string) => axios.get(url).then(res => res.data);

const TEMP_MIN = -20;
const TEMP_MAX = 50;
const HUMIDITY_MIN = 0;
const HUMIDITY_MAX = 100;

export default function PropertySearch() {
  const [filters, setFilters] = useState<SearchFilters>({
    searchText: '',
    tempMin: TEMP_MIN.toString(),
    tempMax: TEMP_MAX.toString(),
    humidityMin: HUMIDITY_MIN.toString(),
    humidityMax: HUMIDITY_MAX.toString(),
    weatherCondition: '',
    city: '',
    limit: 20,
    offset: 0
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [debouncedFilters, setDebouncedFilters] = useState(filters);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedFilters({
        ...filters, 
        offset: (currentPage - 1) * filters.limit
      });
    }, 100);
    return () => clearTimeout(timer);
  }, [filters, currentPage]);

  const queryString = new URLSearchParams(
    Object.entries(debouncedFilters)
      .filter(([key, value]) => {
        // Always include limit and offset for pagination
        if (key === 'limit' || key === 'offset') return true;
        
        // Filter out default values for other parameters
        if (key === 'tempMin' && value === TEMP_MIN.toString()) return false;
        if (key === 'tempMax' && value === TEMP_MAX.toString()) return false;
        if (key === 'humidityMin' && value === HUMIDITY_MIN.toString()) return false;
        if (key === 'humidityMax' && value === HUMIDITY_MAX.toString()) return false;
        
        return value !== '' && value !== '0' && value !== 0;
      })
      .map(([key, value]) => [key, String(value)])
  ).toString();

  const { data, error, isLoading } = useSWR(
    `${process.env.NEXT_PUBLIC_API_URL}/get-properties?${queryString}`,
    fetcher,
    { 
      revalidateOnFocus: false,
      dedupingInterval: 5000,
      refreshInterval: 0,
      onError: (err) => {
        console.error('API Error:', err);
      }
    }
  );

  const handleFilterChange = (key: keyof SearchFilters, value: string | number) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setCurrentPage(1); // Reset to first page when filters change
  };


  const resetFilters = () => {
    setFilters({
      searchText: '',
      tempMin: TEMP_MIN.toString(),
      tempMax: TEMP_MAX.toString(),
      humidityMin: HUMIDITY_MIN.toString(),
      humidityMax: HUMIDITY_MAX.toString(),
      weatherCondition: '',
      city: '',
      limit: 20,
      offset: 0
    });
    setCurrentPage(1);
  };

  const totalPages = data?.pagination?.totalPages || 0;


  return (
    <div className="h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex flex-col">
      <div className="max-w-7xl mx-auto px-6 py-6 flex-1 flex flex-col">
        
        <div className="mb-4">
          <h1 className="text-2xl font-bold text-gray-900 mb-1">Property Search</h1>
          <p className="text-gray-600 text-sm">Find properties with weather filters</p>
        </div>

        <div className="bg-white rounded-lg shadow-sm border p-4 mb-4 flex-shrink-0">
          <div className="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-4 items-end">
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">Search</label>
              <input
                type="text"
                placeholder="Property name"
                value={filters.searchText}
                onChange={(e) => handleFilterChange('searchText', e.target.value)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">City</label>
              <input
                type="text"
                placeholder="City"
                value={filters.city}
                onChange={(e) => handleFilterChange('city', e.target.value)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">Weather</label>
              <select
                value={filters.weatherCondition}
                onChange={(e) => handleFilterChange('weatherCondition', e.target.value)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-white"
              >
                <option value="">All</option>
                <option value="Clear">Clear</option>
                <option value="Cloudy">Cloudy</option>
                <option value="Rainy">Rainy</option>
                <option value="Snow">Snow</option>
              </select>
            </div>

            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">Temp (°C)</label>
              <div className="flex space-x-1">
                <input
                  type="number"
                  min={TEMP_MIN}
                  max={parseInt(filters.tempMax) - 1}
                  value={filters.tempMin}
                  onChange={(e) => handleFilterChange('tempMin', e.target.value)}
                  className="w-full px-2 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                />
                <input
                  type="number"
                  min={parseInt(filters.tempMin) + 1}
                  max={TEMP_MAX}
                  value={filters.tempMax}
                  onChange={(e) => handleFilterChange('tempMax', e.target.value)}
                  className="w-full px-2 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                />
              </div>
            </div>

            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">Humidity (%)</label>
              <div className="flex space-x-1">
                <input
                  type="number"
                  min={HUMIDITY_MIN}
                  max={parseInt(filters.humidityMax) - 1}
                  value={filters.humidityMin}
                  onChange={(e) => handleFilterChange('humidityMin', e.target.value)}
                  className="w-full px-2 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                />
                <input
                  type="number"
                  min={parseInt(filters.humidityMin) + 1}
                  max={HUMIDITY_MAX}
                  value={filters.humidityMax}
                  onChange={(e) => handleFilterChange('humidityMax', e.target.value)}
                  className="w-full px-2 py-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                />
              </div>
            </div>

            <button
              onClick={resetFilters}
              className="px-4 py-2 text-sm text-gray-600 bg-gray-100 hover:bg-gray-200 rounded transition-colors"
            >
              Reset
            </button>
          </div>
        </div>

        {isLoading && (
          <div className="flex-1 overflow-y-auto mb-4">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 pb-4">
              {[...Array(8)].map((_, i) => (
                <div key={i} className="bg-white border border-gray-200 rounded-lg p-4 animate-pulse">
                  <div className="mb-3">
                    <div className="h-4 bg-gray-300 rounded mb-1 w-3/4"></div>
                    <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                  </div>
                  <div className="bg-gray-50 rounded p-3 border">
                    <div className="flex justify-between items-center">
                      <div>
                        <div className="h-6 bg-gray-300 rounded w-12 mb-1"></div>
                        <div className="h-3 bg-gray-200 rounded w-16"></div>
                      </div>
                      <div className="text-right">
                        <div className="h-4 bg-gray-300 rounded w-8 mb-1"></div>
                        <div className="h-3 bg-gray-200 rounded w-12"></div>
                      </div>
                    </div>
                  </div>
                  <div className="mt-2 flex gap-1">
                    <div className="h-6 bg-gray-200 rounded w-12"></div>
                    <div className="h-6 bg-gray-200 rounded w-16"></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Professional Error */}
        {error && (
          <div className="bg-red-50 border border-red-300 rounded-lg p-4 mb-6 flex-shrink-0 shadow-sm">
            <div className="flex items-center">
              <div className="text-red-500 mr-3">⚠️</div>
              <div>
                <h3 className="text-red-800 font-semibold text-sm mb-1">Error Loading Properties</h3>
                <p className="text-red-700 text-xs">
                  {error?.response?.data?.error || 'Unable to load properties. Please try again.'}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Results */}
        {data && (
          <>
            {/* Professional Results Info */}
            <div className="flex justify-between items-center mb-4 flex-shrink-0">
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse"></div>
                <p className="text-sm font-medium text-gray-700">
                  {data.pagination?.total || 0} properties found
                </p>
              </div>
              {data.pagination?.total > 0 && (
                <div className="flex items-center space-x-3">
                  <p className="text-sm text-gray-600 bg-gray-100 px-3 py-1 rounded-full">
                    Page {data.pagination.currentPage} of {data.pagination.totalPages}
                  </p>
                  {data.pagination.totalPages > 1 && (
                    <p className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                      {data.pagination.limit} per page
                    </p>
                  )}
                </div>
              )}
            </div>

            {data.data && data.data.length > 0 ? (
              <div className="flex-1 overflow-y-auto mb-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 pb-4">
                  {data.data.map((property: { id: number; name: string; city: string; state: string; weather?: { temperature: number; condition: string; humidity: number }; tags?: string[] }) => (
                    <div
                      key={property.id}
                      className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="mb-3">
                        <h3 className="font-semibold text-sm text-gray-900 mb-1 truncate">
                          {property.name}
                        </h3>
                        <p className="text-xs text-gray-500">
                          {property.city}, {property.state}
                        </p>
                      </div>
                      
                      {property.weather ? (
                        <div className="bg-gray-50 rounded p-3 border">
                          <div className="flex justify-between items-center">
                            <div>
                              <div className="text-lg font-bold text-gray-900">
                                {property.weather.temperature}°C
                              </div>
                              <div className="text-xs text-gray-600">
                                {property.weather.condition}
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-sm font-semibold text-gray-700">
                                {property.weather.humidity}%
                              </div>
                              <div className="text-xs text-gray-500">
                                Humidity
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="bg-gray-50 rounded p-3 text-center">
                          <p className="text-xs text-gray-500">Weather unavailable</p>
                        </div>
                      )}
                      
                      {property.tags && property.tags.length > 0 && (
                        <div className="mt-2 flex flex-wrap gap-1">
                          {property.tags.slice(0, 2).map((tag: string) => (
                            <span 
                              key={tag}
                              className="text-xs bg-blue-50 text-blue-700 px-2 py-1 rounded font-medium"
                            >
                              {tag}
                            </span>
                          ))}
                          {property.tags.length > 2 && (
                            <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                              +{property.tags.length - 2}
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="flex-1 flex items-center justify-center">
                <div className="text-center p-8">
                  <div className="text-5xl mb-4">🔍</div>
                  <h3 className="text-xl font-bold text-gray-900 mb-3">No properties found</h3>
                  <p className="text-gray-600 mb-6 max-w-md">We couldn&apos;t find any properties matching your current search criteria. Try adjusting your filters to see more results.</p>
                  <button
                    onClick={resetFilters}
                    className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-lg hover:shadow-xl font-medium"
                  >
                    Reset All Filters
                  </button>
                </div>
              </div>
            )}
          </>
        )}

        {/* Advanced Pagination */}
        {data && data.pagination && data.pagination.totalPages > 1 && (
          <div className="border-t bg-white p-4 flex-shrink-0 shadow-sm">
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-1">
                {/* First page */}
                <button
                  onClick={() => setCurrentPage(1)}
                  disabled={currentPage === 1}
                  className="px-3 py-1 text-sm border rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                  title="First page"
                >
                  ««
                </button>
                
                {/* Previous page */}
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="px-3 py-1 text-sm border rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                  title="Previous page"
                >
                  ‹
                </button>
                
                {/* Page numbers */}
                <div className="flex space-x-1">
                  {(() => {
                    const pages = [];
                    const start = Math.max(1, currentPage - 2);
                    const end = Math.min(totalPages, currentPage + 2);
                    
                    // Show ellipsis before if needed
                    if (start > 1) {
                      pages.push(
                        <button
                          key={1}
                          onClick={() => setCurrentPage(1)}
                          className="px-3 py-1 text-sm border rounded hover:bg-gray-50 transition-colors"
                        >
                          1
                        </button>
                      );
                      if (start > 2) {
                        pages.push(
                          <span key="ellipsis-start" className="px-2 text-sm text-gray-500">
                            ...
                          </span>
                        );
                      }
                    }
                    
                    // Show page numbers around current page
                    for (let i = start; i <= end; i++) {
                      pages.push(
                        <button
                          key={i}
                          onClick={() => setCurrentPage(i)}
                          className={`px-3 py-1 text-sm border rounded transition-colors ${
                            currentPage === i
                              ? 'bg-blue-600 text-white border-blue-600'
                              : 'hover:bg-gray-50'
                          }`}
                        >
                          {i}
                        </button>
                      );
                    }
                    
                    // Show ellipsis after if needed
                    if (end < totalPages) {
                      if (end < totalPages - 1) {
                        pages.push(
                          <span key="ellipsis-end" className="px-2 text-sm text-gray-500">
                            ...
                          </span>
                        );
                      }
                      pages.push(
                        <button
                          key={totalPages}
                          onClick={() => setCurrentPage(totalPages)}
                          className="px-3 py-1 text-sm border rounded hover:bg-gray-50 transition-colors"
                        >
                          {totalPages}
                        </button>
                      );
                    }
                    
                    return pages;
                  })()}
                </div>
                
                {/* Next page */}
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 text-sm border rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                  title="Next page"
                >
                  ›
                </button>
                
                {/* Last page */}
                <button
                  onClick={() => setCurrentPage(totalPages)}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 text-sm border rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                  title="Last page"
                >
                  »»
                </button>
              </div>
              
              {/* Page info and quick jump */}
              <div className="flex items-center space-x-3">
                <div className="text-sm text-gray-600">
                  Page {currentPage} of {totalPages}
                </div>
                <div className="flex items-center space-x-1">
                  <span className="text-xs text-gray-500">Go to:</span>
                  <input
                    type="number"
                    min={1}
                    max={totalPages}
                    value={currentPage}
                    onChange={(e) => {
                      const page = parseInt(e.target.value);
                      if (page >= 1 && page <= totalPages) {
                        setCurrentPage(page);
                      }
                    }}
                    className="w-16 px-2 py-1 text-xs border rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
            </div>
          </div>
        )}

      </div>
    </div>
  );
}

================
File: frontend/public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: frontend/public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: frontend/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: frontend/public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: frontend/public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: frontend/src/app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #0f172a;
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  line-height: 1.6;
}

/* Dual Range Slider Styles */
.slider {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
  pointer-events: none;
}

.slider::-webkit-slider-track {
  background: #e5e7eb;
  height: 8px;
  border-radius: 4px;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  background: #3b82f6;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  cursor: pointer;
  border: 3px solid white;
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  pointer-events: all;
  position: relative;
}

.slider::-moz-range-track {
  background: #e5e7eb;
  height: 8px;
  border-radius: 4px;
  border: none;
}

.slider::-moz-range-thumb {
  background: #3b82f6;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  cursor: pointer;
  border: 3px solid white;
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  pointer-events: all;
}

.slider:focus {
  outline: none;
}

.slider:focus::-webkit-slider-thumb {
  box-shadow: 0 2px 6px rgba(0,0,0,0.15), 0 0 0 3px rgba(59, 130, 246, 0.2);
}

.slider:focus::-moz-range-thumb {
  box-shadow: 0 2px 6px rgba(0,0,0,0.15), 0 0 0 3px rgba(59, 130, 246, 0.2);
}

.slider:hover::-webkit-slider-thumb {
  background: #2563eb;
  transform: scale(1.1);
  transition: all 0.2s ease;
}

.slider:hover::-moz-range-thumb {
  background: #2563eb;
  transform: scale(1.1);
  transition: all 0.2s ease;
}

================
File: frontend/src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: frontend/src/app/page.tsx
================
import PropertySearch from "../../components/PropertySearch";

export default function Home() {
  return (
    // <div className="font-sans grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20">
    //   <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
    //     <Image
    //       className="dark:invert"
    //       src="/next.svg"
    //       alt="Next.js logo"
    //       width={180}
    //       height={38}
    //       priority
    //     />
    //     <ol className="font-mono list-inside list-decimal text-sm/6 text-center sm:text-left">
    //       <li className="mb-2 tracking-[-.01em]">
    //         Get started by editing{" "}
    //         <code className="bg-black/[.05] dark:bg-white/[.06] font-mono font-semibold px-1 py-0.5 rounded">
    //           src/app/page.tsx
    //         </code>
    //         .
    //       </li>
    //       <li className="tracking-[-.01em]">
    //         Save and see your changes instantly.
    //       </li>
    //     </ol>

    //     <div className="flex gap-4 items-center flex-col sm:flex-row">
    //       <a
    //         className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto"
    //         href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
    //         target="_blank"
    //         rel="noopener noreferrer"
    //       >
    //         <Image
    //           className="dark:invert"
    //           src="/vercel.svg"
    //           alt="Vercel logomark"
    //           width={20}
    //           height={20}
    //         />
    //         Deploy now
    //       </a>
    //       <a
    //         className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto md:w-[158px]"
    //         href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
    //         target="_blank"
    //         rel="noopener noreferrer"
    //       >
    //         Read our docs
    //       </a>
    //     </div>
    //   </main>
    //   <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
    //     <a
    //       className="flex items-center gap-2 hover:underline hover:underline-offset-4"
    //       href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
    //       target="_blank"
    //       rel="noopener noreferrer"
    //     >
    //       <Image
    //         aria-hidden
    //         src="/file.svg"
    //         alt="File icon"
    //         width={16}
    //         height={16}
    //       />
    //       Learn
    //     </a>
    //     <a
    //       className="flex items-center gap-2 hover:underline hover:underline-offset-4"
    //       href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
    //       target="_blank"
    //       rel="noopener noreferrer"
    //     >
    //       <Image
    //         aria-hidden
    //         src="/window.svg"
    //         alt="Window icon"
    //         width={16}
    //         height={16}
    //       />
    //       Examples
    //     </a>
    //     <a
    //       className="flex items-center gap-2 hover:underline hover:underline-offset-4"
    //       href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
    //       target="_blank"
    //       rel="noopener noreferrer"
    //     >
    //       <Image
    //         aria-hidden
    //         src="/globe.svg"
    //         alt="Globe icon"
    //         width={16}
    //         height={16}
    //       />
    //       Go to nextjs.org →
    //     </a>
    //   </footer>
    // </div>
    <div>
      <PropertySearch/>
    </div>
  );
}

================
File: frontend/.dockerignore
================
# Logs
*.log
logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependencies
node_modules/

# Build output
.next/
out/
build/
dist/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Git
.git
.gitignore

# Docker
Dockerfile*
docker-compose*
.dockerignore

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Tests
coverage/
*.test.js
*.test.ts
*.test.tsx
*.spec.js
*.spec.ts
*.spec.tsx
__tests__/
tests/

# Misc
README.md
.github/
tailwind.config.js

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: frontend/Dockerfile
================
# Development stage - Fast and simple
FROM node:18-alpine AS development

# Install compatibility layer for Alpine
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies
RUN npm ci --no-audit --no-fund && npm cache clean --force

# Copy source code
COPY . .

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["npm", "run", "dev"]

# Production stage - Optimized
FROM node:18-alpine AS production

RUN apk add --no-cache libc6-compat

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --no-audit --no-fund && npm cache clean --force

# Copy source code and build
COPY . .
RUN npm run build

# Change ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV NODE_ENV=production

CMD ["npm", "start"]

================
File: frontend/eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;

================
File: frontend/next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {};

export default nextConfig;

================
File: frontend/package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "build:docker": "next build",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "next": "15.5.2",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "swr": "^2.3.6"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.2",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: frontend/postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: frontend/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: frontend/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        }
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0', transform: 'translateY(10px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
        slideUp: {
          '0%': { opacity: '0', transform: 'translateY(20px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        }
      }
    },
  },
  plugins: [],
}

================
File: frontend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: .gitignore
================
node_modules
# Keep environment variables out of version control
.env

/generated/prisma

================
File: docker-compose.prod.yml
================
version: '3.8'

services:
  backend:
    image: warden/backend:latest
    environment:
      NODE_ENV: production
    env_file:
      - ./backend/.env.production
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        max_attempts: 3

  redis:
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 1G

  elasticsearch:
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx2g"
    deploy:
      resources:
        limits:
          memory: 3G

  mysql:
    deploy:
      resources:
        limits:
          memory: 2G
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=1G

================
File: docker-compose.yml
================
version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      target: development
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@host:5432/dbname}
      - REDIS_URL=${REDIS_URL:-redis://localhost:6379}
      - PORT=5001
    ports:
      - "5001:5001"
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend
  frontend:
    build:
      context: ./frontend
      target: development
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5001
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

networks:
  default:
    name: warden-network
    driver: bridge

================
File: package.json
================
{
  "devDependencies": {
    "@types/jest": "^30.0.0"
  }
}

================
File: README.md
================
# 🏠 Weather to Stay or Not

Welcome! This is an evaluation project for Warden.

You are provided with a slice of the Warden backend codebase. At present, it contains only one API endpoint, `/get-properties`, which returns the first 20 properties and supports basic text search.

In the file `.env.example` you are given readonly credentials of a live hosted database. This db is already populated with properties data on which this API operates.

## Objectives

Your task is to build a single **search page in Next.js** that consumes this API to return accurate results and provides users with both search and filtering capabilities. **Specific Requirement is given below.**

The focus here is **functionality rather than design**. This means the main priority is on backend query optimization (efficiently handling multiple filters, scaling to larger datasets, and returning results quickly) and smooth frontend integration (accurate wiring between filters, search, and API responses). The UI itself can remain minimal: a simple search bar, intuitive filtering inputs, and property cards showing relevant information are more than enough.

## User Requirements

![It sure is a hot one today](https://arden-public.s3.ap-south-1.amazonaws.com/hotone.jpg)

Our Product team has identified that weather is a critical factor when people choose properties to stay at. In fact, some residents might even reject a job offer if the local weather doesn’t suit them. To address this, we need to enhance the property search experience by adding **live weather-based filters**.

After a 6 hour meeting, following filters and constraints were finalized.

| **Filter**             | **Input Type**          | **Allowed Range/Options**                                                                                                                                                                                                                     |
| ---------------------- | ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Temperature Range (°C) | Numeric range (min/max) | -20°C to 50°C                                                                                                                                                                                                                                 |
| Humidity Range (%)     | Numeric range (min/max) | 0% to 100%                                                                                                                                                                                                                                    |
| Weather Condition      | Dropdown (grouped)      | - **Clear:** 0 (clear sky)<br>- **Cloudy:** 1–3 (partly cloudy to overcast)<br>- **Drizzle:** 51–57 (light to dense drizzle)<br>- **Rainy:** 61–67, 80–82 (rain showers, light to heavy)<br>- **Snow:** 71–77, 85–86 (snowfall, snow showers) |

> **Note:** The numbers listed under "Weather Condition" refer to weather codes as defined by [WMO](https://codes.wmo.int/common/weather-code) (World Meteorological Organization)

## Approach

1. Use [Open-Meteo](https://open-meteo.com/) to fetch **live weather data** by passing `latitude` and `longitude` from each property. No API key is required.

2. You only have **readonly access** to the provided database. If you wish to create migrations or modify the schema, please follow the [migration guide](docs/migrations.md).

## Installation

1. Clone this repository and move into the folder:
   ```bash
   git clone <repo-url>
   cd warden-test-one
   ```
2. Install Dependencies
   ```bash
   npm i
   npm run prisma:gen
   ```
3. Copy Environment File
   ```bash
   cp .env.example .env
   ```
4. Start the development server
   ```bash
   npm run dev
   ```
   open `http://localhost:5001` you should see "Warden Weather Test: OK"

## Technical Expectations

1. Use strict types as much as possible.

2. Keep the code modular, resource efficient and fast!

3. Keep a good commit history, with small meaningful commits

## Quality Expectations

Assume that you are already working here, and you are given full responsibilty ownership of this endpoint. Treat this codebase as production!

If you feel that you can enhance this project with any additional filters, better UI elements, or something different altogether! Feel free to run wild.

## Deliverables

1. A working app with the required changes as per the assignment.

2. README.md with setup/run instructions. Include .env.example and a seed step (if any) if you've changed db schema.

3. AI_USAGE.md that lists where you used AI/coding assistants, prompts you asked for substantive code, and how you verified/modified results. AI use is not discouraged, but we want to understand how you structure your prompts.

4. A 5-10 min video walkthrough via Loom showing the working feature and explaining your approach, a couple of decisions, and at least one scenario where you discovered some critical foresight and changed your approach.

## Submission

- You have **48 hours** from the time you receive the assignment email to complete and submit your solution.

- After making all required changes, **push your code to a public repository**.

- **Share the public repo link** and all deliverables by replying to the assignment email, and **CC hiring@wardenera.com**.

- Use the subject line: `Weather to Stay or Not | Warden Assignment by {your_name}`.

Good luck, have fun.
